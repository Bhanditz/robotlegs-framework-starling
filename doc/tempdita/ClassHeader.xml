<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="org.robotlegs.adapters">
      <apiName>org.robotlegs.adapters</apiName>
      <apiDetail/>
      <apiClassifier id="org.robotlegs.adapters:SwiftSuspendersInjector">
         <apiName>SwiftSuspendersInjector</apiName>
         <shortdesc>
	 SwiftSuspender IInjector adpater - See: SwiftSuspenders
	 
	 </shortdesc>
         <prolog>
            <author>tschneidereit
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="SwiftSuspendersInjector,org.robotlegs.adapters.SwiftSuspendersInjector,XML_CONFIG,applicationDomain,createChild"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IInjector</apiBaseInterface>
               <apiBaseClassifier>org.swiftsuspenders:Injector</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 SwiftSuspender <codeph>IInjector</codeph> adpater - See: <xref href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</xref>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.swiftsuspenders:Injector"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IInjector"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.adapters:SwiftSuspendersReflector">
         <apiName>SwiftSuspendersReflector</apiName>
         <shortdesc>
	 SwiftSuspender IReflector adpater - See: SwiftSuspenders
	 
	 </shortdesc>
         <prolog>
            <author>tschneidereit
	 </author>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="SwiftSuspendersReflector,org.robotlegs.adapters.SwiftSuspendersReflector"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IReflector</apiBaseInterface>
               <apiBaseClassifier>org.swiftsuspenders:Reflector</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 SwiftSuspender <codeph>IReflector</codeph> adpater - See: <xref href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</xref>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.swiftsuspenders:Reflector"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IReflector"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.robotlegs.starling.base">
      <apiName>org.robotlegs.starling.base</apiName>
      <apiDetail/>
      <apiClassifier id="org.robotlegs.starling.base:ContextBase">
         <apiName>ContextBase</apiName>
         <shortdesc>
	 An abstract IContext implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ContextBase,org.robotlegs.starling.base.ContextBase,E_COMMANDMAP_NOIMPL,E_COMMANDMAP_OVR,E_CONTEXT_INJECTOR,E_CONTEXT_REFLECTOR,E_CONTEXT_VIEW_OVR,E_EVENTMAP_NOSNOOPING,E_MEDIATORMAP_NOIMPL,E_MEDIATORMAP_OVR,FeathersControlType,SHUTDOWN_COMPLETE,SHUTDOWN,STARTUP_COMPLETE,STARTUP,contextView,detainedCommands,dispatcherListeningEnabled,enabled,eventDispatcher,eventDispatcher,eventDispatcher,eventTypeMap,feathersAvailable,injector,reflector,removed,verifiedCommandClasses,viewComponent"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IContext</apiBaseInterface>
               <apiBaseClassifier>starling.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An abstract <codeph>IContext</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="starling.events:EventDispatcher"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IContext"/>
               </Implements>
               <Subclasses>
                  <class id="org.robotlegs.starling.mvcs:Context"/>
               </Subclasses>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ContextEventType">
         <apiName>ContextEventType</apiName>
         <shortdesc>
	 Framework event types
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ContextEventType,org.robotlegs.starling.base.ContextEventType,E_COMMANDMAP_NOIMPL,E_COMMANDMAP_OVR,E_CONTEXT_INJECTOR,E_CONTEXT_REFLECTOR,E_CONTEXT_VIEW_OVR,E_EVENTMAP_NOSNOOPING,E_MEDIATORMAP_NOIMPL,E_MEDIATORMAP_OVR,FeathersControlType,SHUTDOWN_COMPLETE,SHUTDOWN,STARTUP_COMPLETE,STARTUP,contextView,detainedCommands,dispatcherListeningEnabled,enabled,eventDispatcher,eventDispatcher,eventDispatcher,eventTypeMap,feathersAvailable,injector,reflector,removed,verifiedCommandClasses,viewComponent"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Framework event types
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:EventMap">
         <apiName>EventMap</apiName>
         <shortdesc>
	 An abstract IEventMap implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="EventMap,org.robotlegs.starling.base.EventMap,E_COMMANDMAP_NOIMPL,E_COMMANDMAP_OVR,E_CONTEXT_INJECTOR,E_CONTEXT_REFLECTOR,E_CONTEXT_VIEW_OVR,E_EVENTMAP_NOSNOOPING,E_MEDIATORMAP_NOIMPL,E_MEDIATORMAP_OVR,FeathersControlType,SHUTDOWN_COMPLETE,SHUTDOWN,STARTUP_COMPLETE,STARTUP,contextView,detainedCommands,dispatcherListeningEnabled,enabled,eventDispatcher,eventDispatcher,eventDispatcher,eventTypeMap,feathersAvailable,injector,reflector,removed,verifiedCommandClasses,viewComponent,checkFeathers,createMediator,detain,execute,getViewComponent,hasEventCommand,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,mapEvent,mapListener,mapPackage,mapType,mapView,onCreationComplete,onRegister,onRemove,onViewRemoved,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,removeMediatorLater,retrieveMediator,routeEventToCommand,routeEventToListener,setViewComponent,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView,verifyCommandClass"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IEventMap</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An abstract <codeph>IEventMap</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IEventMap"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ContextError">
         <apiName>ContextError</apiName>
         <shortdesc>
	 A framework Error implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ContextError,org.robotlegs.starling.base.ContextError,E_COMMANDMAP_NOIMPL,E_COMMANDMAP_OVR,E_CONTEXT_INJECTOR,E_CONTEXT_REFLECTOR,E_CONTEXT_VIEW_OVR,E_EVENTMAP_NOSNOOPING,E_MEDIATORMAP_NOIMPL,E_MEDIATORMAP_OVR,FeathersControlType,SHUTDOWN_COMPLETE,SHUTDOWN,STARTUP_COMPLETE,STARTUP,contextView,detainedCommands,dispatcherListeningEnabled,enabled,eventDispatcher,eventDispatcher,eventDispatcher,eventTypeMap,feathersAvailable,injector,reflector,removed,verifiedCommandClasses,viewComponent"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A framework Error implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Error"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:MediatorMap">
         <apiName>MediatorMap</apiName>
         <shortdesc>
	 An abstract IMediatorMap implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="MediatorMap,org.robotlegs.starling.base.MediatorMap,checkFeathers,createMediator,detain,execute,getViewComponent,hasEventCommand,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,mapEvent,mapListener,mapPackage,mapType,mapView,onCreationComplete,onRegister,onRemove,onViewRemoved,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,removeMediatorLater,retrieveMediator,routeEventToCommand,routeEventToListener,setViewComponent,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView,verifyCommandClass"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IMediatorMap</apiBaseInterface>
               <apiBaseClassifier>org.robotlegs.starling.base:ViewMapBase</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An abstract <codeph>IMediatorMap</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.robotlegs.starling.base:ViewMapBase"/>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IMediatorMap"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ViewMapBase">
         <apiName>ViewMapBase</apiName>
         <shortdesc>
	 A base ViewMap implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ViewMapBase,org.robotlegs.starling.base.ViewMapBase,E_COMMANDMAP_NOIMPL,E_COMMANDMAP_OVR,E_CONTEXT_INJECTOR,E_CONTEXT_REFLECTOR,E_CONTEXT_VIEW_OVR,E_EVENTMAP_NOSNOOPING,E_MEDIATORMAP_NOIMPL,E_MEDIATORMAP_OVR,FeathersControlType,SHUTDOWN_COMPLETE,SHUTDOWN,STARTUP_COMPLETE,STARTUP,contextView,detainedCommands,dispatcherListeningEnabled,enabled,eventDispatcher,eventDispatcher,eventDispatcher,eventTypeMap,feathersAvailable,injector,reflector,removed,verifiedCommandClasses,viewComponent"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 A base ViewMap implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses>
                  <class id="org.robotlegs.starling.base:MediatorMap"/>
                  <class id="org.robotlegs.starling.base:ViewMap"/>
               </Subclasses>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:MediatorBase">
         <apiName>MediatorBase</apiName>
         <shortdesc>
	 An abstract IMediator implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="MediatorBase,org.robotlegs.starling.base.MediatorBase,E_COMMANDMAP_NOIMPL,E_COMMANDMAP_OVR,E_CONTEXT_INJECTOR,E_CONTEXT_REFLECTOR,E_CONTEXT_VIEW_OVR,E_EVENTMAP_NOSNOOPING,E_MEDIATORMAP_NOIMPL,E_MEDIATORMAP_OVR,FeathersControlType,SHUTDOWN_COMPLETE,SHUTDOWN,STARTUP_COMPLETE,STARTUP,contextView,detainedCommands,dispatcherListeningEnabled,enabled,eventDispatcher,eventDispatcher,eventDispatcher,eventTypeMap,feathersAvailable,injector,reflector,removed,verifiedCommandClasses,viewComponent,checkFeathers,createMediator,detain,execute,getViewComponent,hasEventCommand,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,mapEvent,mapListener,mapPackage,mapType,mapView,onCreationComplete,onRegister,onRemove,onViewRemoved,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,removeMediatorLater,retrieveMediator,routeEventToCommand,routeEventToListener,setViewComponent,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView,verifyCommandClass"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IMediator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An abstract <codeph>IMediator</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IMediator"/>
               </Implements>
               <Subclasses>
                  <class id="org.robotlegs.starling.mvcs:Mediator"/>
               </Subclasses>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ViewMap">
         <apiName>ViewMap</apiName>
         <shortdesc>
	 An abstract IViewMap implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ViewMap,org.robotlegs.starling.base.ViewMap,checkFeathers,createMediator,detain,execute,getViewComponent,hasEventCommand,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,mapEvent,mapListener,mapPackage,mapType,mapView,onCreationComplete,onRegister,onRemove,onViewRemoved,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,removeMediatorLater,retrieveMediator,routeEventToCommand,routeEventToListener,setViewComponent,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView,verifyCommandClass"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IViewMap</apiBaseInterface>
               <apiBaseClassifier>org.robotlegs.starling.base:ViewMapBase</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An abstract <codeph>IViewMap</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.robotlegs.starling.base:ViewMapBase"/>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IViewMap"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:CommandMap">
         <apiName>CommandMap</apiName>
         <shortdesc>
	 An abstract ICommandMap implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="CommandMap,org.robotlegs.starling.base.CommandMap,E_COMMANDMAP_NOIMPL,E_COMMANDMAP_OVR,E_CONTEXT_INJECTOR,E_CONTEXT_REFLECTOR,E_CONTEXT_VIEW_OVR,E_EVENTMAP_NOSNOOPING,E_MEDIATORMAP_NOIMPL,E_MEDIATORMAP_OVR,FeathersControlType,SHUTDOWN_COMPLETE,SHUTDOWN,STARTUP_COMPLETE,STARTUP,contextView,detainedCommands,dispatcherListeningEnabled,enabled,eventDispatcher,eventDispatcher,eventDispatcher,eventTypeMap,feathersAvailable,injector,reflector,removed,verifiedCommandClasses,viewComponent,checkFeathers,createMediator,detain,execute,getViewComponent,hasEventCommand,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,mapEvent,mapListener,mapPackage,mapType,mapView,onCreationComplete,onRegister,onRemove,onViewRemoved,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,removeMediatorLater,retrieveMediator,routeEventToCommand,routeEventToListener,setViewComponent,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView,verifyCommandClass"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:ICommandMap</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 An abstract <codeph>ICommandMap</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:ICommandMap"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.robotlegs.starling.core">
      <apiName>org.robotlegs.starling.core</apiName>
      <apiDetail/>
      <apiClassifier id="org.robotlegs.starling.core:IContext">
         <apiName>IContext</apiName>
         <shortdesc>
	 The Robotlegs Context contract
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IContext,org.robotlegs.starling.core.IContext,applicationDomain,contextView,contextView,enabled,enabled,eventDispatcher"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs Context contract
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.starling.mvcs:Context"/>
                  <Implementor id="org.robotlegs.starling.base:ContextBase"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IEventMap">
         <apiName>IEventMap</apiName>
         <shortdesc>
	 The Robotlegs EventMap contract
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IEventMap,org.robotlegs.starling.core.IEventMap,classExtendsOrImplements,createChild,createMediator,detain,execute,getClass,getFQCN,getInstance,getViewComponent,hasEventCommand,hasMapping,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,instantiate,mapClass,mapEvent,mapListener,mapPackage,mapRule,mapSingleton,mapSingletonOf,mapType,mapValue,mapView,onRegister,onRemove,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,retrieveMediator,setViewComponent,unmap,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs EventMap contract
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.starling.base:EventMap"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IMediatorMap">
         <apiName>IMediatorMap</apiName>
         <shortdesc>
	 The Robotlegs MediatorMap contract
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IMediatorMap,org.robotlegs.starling.core.IMediatorMap,applicationDomain,contextView,contextView,enabled,enabled,eventDispatcher,classExtendsOrImplements,createChild,createMediator,detain,execute,getClass,getFQCN,getInstance,getViewComponent,hasEventCommand,hasMapping,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,instantiate,mapClass,mapEvent,mapListener,mapPackage,mapRule,mapSingleton,mapSingletonOf,mapType,mapValue,mapView,onRegister,onRemove,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,retrieveMediator,setViewComponent,unmap,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs MediatorMap contract
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.starling.base:MediatorMap"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IReflector">
         <apiName>IReflector</apiName>
         <shortdesc>
	 The Robotlegs Reflector contract
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IReflector,org.robotlegs.starling.core.IReflector,classExtendsOrImplements,createChild,createMediator,detain,execute,getClass,getFQCN,getInstance,getViewComponent,hasEventCommand,hasMapping,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,instantiate,mapClass,mapEvent,mapListener,mapPackage,mapRule,mapSingleton,mapSingletonOf,mapType,mapValue,mapView,onRegister,onRemove,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,retrieveMediator,setViewComponent,unmap,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs Reflector contract
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.adapters:SwiftSuspendersReflector"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IMediator">
         <apiName>IMediator</apiName>
         <shortdesc>
	 The Robotlegs Mediator contract
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IMediator,org.robotlegs.starling.core.IMediator,classExtendsOrImplements,createChild,createMediator,detain,execute,getClass,getFQCN,getInstance,getViewComponent,hasEventCommand,hasMapping,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,instantiate,mapClass,mapEvent,mapListener,mapPackage,mapRule,mapSingleton,mapSingletonOf,mapType,mapValue,mapView,onRegister,onRemove,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,retrieveMediator,setViewComponent,unmap,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs Mediator contract
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.starling.base:MediatorBase"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IInjector">
         <apiName>IInjector</apiName>
         <shortdesc>
	 The Robotlegs Injector contract
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IInjector,org.robotlegs.starling.core.IInjector,applicationDomain,contextView,contextView,enabled,enabled,eventDispatcher,classExtendsOrImplements,createChild,createMediator,detain,execute,getClass,getFQCN,getInstance,getViewComponent,hasEventCommand,hasMapping,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,instantiate,mapClass,mapEvent,mapListener,mapPackage,mapRule,mapSingleton,mapSingletonOf,mapType,mapValue,mapView,onRegister,onRemove,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,retrieveMediator,setViewComponent,unmap,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs Injector contract
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.adapters:SwiftSuspendersInjector"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IViewMap">
         <apiName>IViewMap</apiName>
         <shortdesc>
	 The Robotlegs ViewMap contract.</shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="IViewMap,org.robotlegs.starling.core.IViewMap,applicationDomain,contextView,contextView,enabled,enabled,eventDispatcher,classExtendsOrImplements,createChild,createMediator,detain,execute,getClass,getFQCN,getInstance,getViewComponent,hasEventCommand,hasMapping,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,instantiate,mapClass,mapEvent,mapListener,mapPackage,mapRule,mapSingleton,mapSingletonOf,mapType,mapValue,mapView,onRegister,onRemove,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,retrieveMediator,setViewComponent,unmap,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs ViewMap contract. All IViewMap automatic injections occur AFTER the view components are added to the stage.
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.starling.base:ViewMap"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:ICommandMap">
         <apiName>ICommandMap</apiName>
         <shortdesc>
	 The Robotlegs CommandMap contract
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="ICommandMap,org.robotlegs.starling.core.ICommandMap,classExtendsOrImplements,createChild,createMediator,detain,execute,getClass,getFQCN,getInstance,getViewComponent,hasEventCommand,hasMapping,hasMapping,hasMediator,hasMediatorForView,hasPackage,hasType,injectInto,instantiate,mapClass,mapEvent,mapListener,mapPackage,mapRule,mapSingleton,mapSingletonOf,mapType,mapValue,mapView,onRegister,onRemove,preRegister,preRemove,registerMediator,release,removeMediator,removeMediatorByView,retrieveMediator,setViewComponent,unmap,unmapEvent,unmapEvents,unmapListener,unmapListeners,unmapPackage,unmapType,unmapView"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
            <apiDesc>
	 The Robotlegs CommandMap contract
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id=""/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors>
                  <Implementor id="org.robotlegs.starling.base:CommandMap"/>
               </Implementors>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.robotlegs.starling.mvcs">
      <apiName>org.robotlegs.starling.mvcs</apiName>
      <apiDetail/>
      <apiClassifier id="org.robotlegs.starling.mvcs:Command">
         <apiName>Command</apiName>
         <shortdesc>
	 Abstract MVCS command implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="Command,org.robotlegs.starling.mvcs.Command,commandMap,commandMap,contextView,contextView,contextView,eventDispatcher,eventDispatcher,eventDispatcher,eventMap,eventMap,injector,injector,mediatorMap,mediatorMap,mediatorMap,reflector,viewMap,addContextListener,addViewListener,dispatch,dispatch,dispatch,dispatchWith,dispatchWith,dispatchWith,execute,mapInjections,preRemove,removeContextListener,removeViewListener,shutdown,startup"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Abstract MVCS command implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.mvcs:Mediator">
         <apiName>Mediator</apiName>
         <shortdesc>
	 Abstract MVCS IMediator implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="Mediator,org.robotlegs.starling.mvcs.Mediator,commandMap,commandMap,contextView,contextView,contextView,eventDispatcher,eventDispatcher,eventDispatcher,eventMap,eventMap,injector,injector,mediatorMap,mediatorMap,mediatorMap,reflector,viewMap,addContextListener,addViewListener,dispatch,dispatch,dispatch,dispatchWith,dispatchWith,dispatchWith,execute,mapInjections,preRemove,removeContextListener,removeViewListener,shutdown,startup"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>org.robotlegs.starling.base:MediatorBase</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Abstract MVCS <codeph>IMediator</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.robotlegs.starling.base:MediatorBase"/>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.mvcs:Context">
         <apiName>Context</apiName>
         <shortdesc>
	 Abstract MVCS IContext implementation
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="Context,org.robotlegs.starling.mvcs.Context,commandMap,commandMap,contextView,contextView,contextView,eventDispatcher,eventDispatcher,eventDispatcher,eventMap,eventMap,injector,injector,mediatorMap,mediatorMap,mediatorMap,reflector,viewMap,addContextListener,addViewListener,dispatch,dispatch,dispatch,dispatchWith,dispatchWith,dispatchWith,execute,mapInjections,preRemove,removeContextListener,removeViewListener,shutdown,startup"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IContext</apiBaseInterface>
               <apiBaseClassifier>org.robotlegs.starling.base:ContextBase</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Abstract MVCS <codeph>IContext</codeph> implementation
	 </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="org.robotlegs.starling.base:ContextBase"/>
                  <Inherit id="starling.events:EventDispatcher"/>
               </Inheritance>
               <Implements>
                  <Implement id="org.robotlegs.starling.core:IContext"/>
               </Implements>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.mvcs:Actor">
         <apiName>Actor</apiName>
         <shortdesc>
	 Abstract MVCS IActor implementation
	 
	 As part of the MVCS implementation the Actor provides core functionality to an applications
	 various working parts.
	 
	 Some possible uses for the Actor include, but are no means limited to:
	 
	 
	 Service classes
	 Model classes
	 Controller classes
	 Presentation model classes
	 
	 
	 Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending Actor.
	 
	 </shortdesc>
         <prolog>
            <asMetadata/>
         </prolog>
            <meta name="keywords"
               content="Actor,org.robotlegs.starling.mvcs.Actor,commandMap,commandMap,contextView,contextView,contextView,eventDispatcher,eventDispatcher,eventDispatcher,eventMap,eventMap,injector,injector,mediatorMap,mediatorMap,mediatorMap,reflector,viewMap,addContextListener,addViewListener,dispatch,dispatch,dispatch,dispatchWith,dispatchWith,dispatchWith,execute,mapInjections,preRemove,removeContextListener,removeViewListener,shutdown,startup"/>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
            <apiDesc>
	 Abstract MVCS <codeph>IActor</codeph> implementation
	 
	 <p>As part of the MVCS implementation the <codeph>Actor</codeph> provides core functionality to an applications
	 various working parts.</p>
	 
	              <p>Some possible uses for the <codeph>Actor</codeph> include, but are no means limited to:</p>
	 
	              <ul>
	                 <li>Service classes</li>
	                 <li>Model classes</li>
	                 <li>Controller classes</li>
	                 <li>Presentation model classes</li>
	              </ul>
	 
	              <p>Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending <codeph>Actor</codeph>.</p>
	 
	           </apiDesc>
            <Inheritancelist>
               <BaseInterface/>
               <Inheritance>
                  <Inherit id="Object"/>
               </Inheritance>
               <Implements/>
               <Subclasses/>
               <Implementors/>
               <Excludes/>
            </Inheritancelist>
         </apiClassifierDetail>
      </apiClassifier>
   </apiPackage>
</allClasses>