<?xml version="1.0" encoding="UTF-8"?><apiPackage id="org.robotlegs.starling.mvcs"><apiName>org.robotlegs.starling.mvcs</apiName><apiDetail/><apiClassifier id="org.robotlegs.starling.mvcs:Command"><apiName>Command</apiName><shortdesc>
	 Abstract MVCS command implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS command implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.mvcs:Command:Command"><apiName>Command</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Command:protected:dispatchWith"><apiName>dispatchWith</apiName><shortdesc>
		 Dispatch helper method with pooling
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether the event bubbles
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The payload to include with the event
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method with pooling
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Command:protected:dispatch"><apiName>dispatch</apiName><shortdesc>
		 Dispatch helper method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The <codeph>Event</codeph> to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Command:execute"><apiName>execute</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Command:commandMap"><apiName>commandMap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:ICommandMap</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:contextView"><apiName>contextView</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:eventDispatcher"><apiName>eventDispatcher</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="starling.events:EventDispatcher"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:injector"><apiName>injector</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IInjector</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:mediatorMap"><apiName>mediatorMap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IMediatorMap</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.mvcs:Mediator"><apiName>Mediator</apiName><shortdesc>
	 Abstract MVCS IMediator implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.robotlegs.starling.base:MediatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS <codeph>IMediator</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.mvcs:Mediator:Mediator"><apiName>Mediator</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:addContextListener"><apiName>addContextListener</apiName><shortdesc>
		 Syntactical sugar for mapping a listener to an EventDispatcher
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for mapping a listener to an <codeph>EventDispatcher</codeph>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:addViewListener"><apiName>addViewListener</apiName><shortdesc>
		 Syntactical sugar for mapping a listener to the viewComponent 
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for mapping a listener to the <codeph>viewComponent</codeph> 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:dispatchWith"><apiName>dispatchWith</apiName><shortdesc>
		 Dispatch helper method with pooling
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether the event bubbles
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The payload to include with the event
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method with pooling
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:dispatch"><apiName>dispatch</apiName><shortdesc>
		 Dispatch helper method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The Event to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:preRemove"><apiName>preRemove</apiName><shortdesc>
		 
		 
		 Invoked when the IMediator has been removed by the IMediatorMap
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 
		 Invoked when the <codeph>IMediator</codeph> has been removed by the <codeph>IMediatorMap</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:removeContextListener"><apiName>removeContextListener</apiName><shortdesc>
		 Syntactical sugar for unmapping a listener from an IEventDispatcher
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for unmapping a listener from an <codeph>IEventDispatcher</codeph>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:removeViewListener"><apiName>removeViewListener</apiName><shortdesc>
		 Syntactical sugar for mapping a listener from the viewComponent
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for mapping a listener from the <codeph>viewComponent</codeph>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Mediator:contextView"><apiName>contextView</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Mediator:mediatorMap"><apiName>mediatorMap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IMediatorMap</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Mediator:eventDispatcher:get"><apiName>eventDispatcher</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="org.robotlegs.starling.mvcs:Mediator:protected:eventMap:get"><apiName>eventMap</apiName><shortdesc>
		 Local EventMap
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>org.robotlegs.starling.core:IEventMap</apiValueClassifier></apiValueDef><apiDesc>
		 Local EventMap
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.mvcs:Context"><apiName>Context</apiName><shortdesc>
	 Abstract MVCS IContext implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IContext</apiBaseInterface><apiBaseClassifier>org.robotlegs.starling.base:ContextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS <codeph>IContext</codeph> implementation
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="org.robotlegs.starling.mvcs:Context_org.robotlegs.starling.base.ContextEventType.STARTUP_COMPLETE_startupComplete"><apiName>startupComplete</apiName><shortdesc>
	 Dispatched by the startup() method when it finishes
	 executing.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.robotlegs.starling.base.ContextEventType.STARTUP_COMPLETE</apiEventType><adobeApiEventClassifier>starling.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Dispatched by the <codeph>startup()</codeph> method when it finishes
	 executing.
	 
	 <p>One common pattern for application startup/bootstrapping makes use
	 of the <codeph>startupComplete</codeph> event. In this pattern, you do the
	 following:</p>
	 <ul>
	   <li>Override the <codeph>startup()</codeph> method in your Context 
	       subclass and set up application mappings in your 
	       <codeph>startup()</codeph> override as you always do in Robotlegs.</li>
	   <li>Create commands that perform startup/bootstrapping operations
	       such as loading the initial data, checking for application updates,
	       etc.</li>
	   <li><p>Map those commands to the <codeph>ContextEvent.STARTUP_COMPLETE</codeph>
	       event:</p>
	       <codeblock>commandMap.mapEvent(ContextEvent.STARTUP_COMPLETE, LoadInitialDataCommand, ContextEvent, true):</codeblock>
	       </li>
	   <li>Dispatch the <codeph>startupComplete</codeph> (<codeph>ContextEvent.STARTUP_COMPLETE</codeph>)
	       event from your <codeph>startup()</codeph> override. You can do this
	       in one of two ways: dispatch the event yourself, or call 
	       <codeph>super.startup()</codeph>. (The Context class's 
	       <codeph>startup()</codeph> method dispatches the 
	       <codeph>startupComplete</codeph> event.)</li>
	 </ul>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="org.robotlegs.starling.mvcs.xml#Context/startup()"><linktext>startup()</linktext></link></related-links></adobeApiEvent><apiConstructor id="org.robotlegs.starling.mvcs:Context:Context"><apiName>Context</apiName><shortdesc>
		 Abstract Context Implementation
		 
		 Extend this class to create a Framework or Application context
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>contextView</apiItemName><apiType value="starling.display:DisplayObjectContainer"/><apiData>null</apiData><apiDesc>The root view node of the context. The context will listen for ADDED_TO_STAGE events on this node
		 </apiDesc></apiParam><apiParam><apiItemName>autoStartup</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Should this context automatically invoke it's <codeph>startup</codeph> method when it's <codeph>contextView</codeph> arrives on Stage?
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Abstract Context Implementation
		 
		 <p>Extend this class to create a Framework or Application context</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Context:protected:mapInjections"><apiName>mapInjections</apiName><shortdesc>
		 Injection Mapping Hook
		 
		 Override this in your Framework context to change the default configuration
		 
		 Beware of collisions in your container
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Injection Mapping Hook
		 
		 <p>Override this in your Framework context to change the default configuration</p>
		 
		 <p>Beware of collisions in your container</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Context:shutdown"><apiName>shutdown</apiName><shortdesc>
		 The Startup Hook
		 
		 Override this in your Application context
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 The Startup Hook
		 
		 <p>Override this in your Application context</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Context:startup"><apiName>startup</apiName><shortdesc>
		 The Startup Hook
		 
		 Override this in your Application context
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 The Startup Hook
		 
		 <p>Override this in your Application context</p>
		 
		 </apiDesc></apiOperationDetail><adobeApiEvent id="org.robotlegs.starling.mvcs:Context:startup_startupComplete"><apiName>startupComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Dispatched at the end of the
		                        <codeph>startup()</codeph> method's execution. This
		                        is often used to trigger startup/bootstrapping
		                        commands by wiring them to this event and 
		                        calling <codeph>super.startup()</codeph> in the 
		                        last line of your <codeph>startup()</codeph>
		                        override.
		 </apiDesc></adobeApiEventDetail><shortdesc>Dispatched at the end of the
		                        startup() method's execution.</shortdesc></adobeApiEvent></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Context:protected:commandMap:get"><apiName>commandMap</apiName><shortdesc>
		 The ICommandMap for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:ICommandMap</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>ICommandMap</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:contextView:get"><apiName>contextView</apiName><shortdesc>
		 The DisplayObjectContainer that scopes this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
		 The <codeph>DisplayObjectContainer</codeph> that scopes this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:injector:get"><apiName>injector</apiName><shortdesc>
		 The IInjector for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IInjector</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IInjector</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:mediatorMap:get"><apiName>mediatorMap</apiName><shortdesc>
		 The IMediatorMap for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IMediatorMap</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IMediatorMap</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:reflector:get"><apiName>reflector</apiName><shortdesc>
		 The IReflector for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IReflector</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IReflector</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:viewMap:get"><apiName>viewMap</apiName><shortdesc>
		 The IViewMap for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IViewMap</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IViewMap</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.mvcs:Actor"><apiName>Actor</apiName><shortdesc>
	 Abstract MVCS IActor implementation
	 
	 As part of the MVCS implementation the Actor provides core functionality to an applications
	 various working parts.
	 
	 Some possible uses for the Actor include, but are no means limited to:
	 
	 
	 Service classes
	 Model classes
	 Controller classes
	 Presentation model classes
	 
	 
	 Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending Actor.
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS <codeph>IActor</codeph> implementation
	 
	 <p>As part of the MVCS implementation the <codeph>Actor</codeph> provides core functionality to an applications
	 various working parts.</p>
	 
	 <p>Some possible uses for the <codeph>Actor</codeph> include, but are no means limited to:</p>
	 
	 <ul>
	 <li>Service classes</li>
	 <li>Model classes</li>
	 <li>Controller classes</li>
	 <li>Presentation model classes</li>
	 </ul>
	 
	 <p>Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending <codeph>Actor</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.mvcs:Actor:Actor"><apiName>Actor</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Actor:protected:dispatchWith"><apiName>dispatchWith</apiName><shortdesc>
		 Dispatch helper method with pooling
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether the event bubbles
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The payload to include with the event
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method with pooling
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Actor:protected:dispatch"><apiName>dispatch</apiName><shortdesc>
		 Dispatch helper method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The <codeph>Event</codeph> to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Actor:eventDispatcher:get"><apiName>eventDispatcher</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="org.robotlegs.starling.mvcs:Actor:protected:eventMap:get"><apiName>eventMap</apiName><shortdesc>
		 Local EventMap
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>org.robotlegs.starling.core:IEventMap</apiValueClassifier></apiValueDef><apiDesc>
		 Local EventMap
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>