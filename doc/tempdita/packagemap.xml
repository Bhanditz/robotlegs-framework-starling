<?xml version="1.0" encoding="UTF-8"?><allClasses><apiPackage id="org.robotlegs.adapters"><apiName>org.robotlegs.adapters</apiName><apiDetail/><apiClassifier id="org.robotlegs.adapters:SwiftSuspendersInjector"><apiName>SwiftSuspendersInjector</apiName><shortdesc>
	 SwiftSuspender IInjector adpater - See: SwiftSuspenders
	 
	 </shortdesc><prolog><author>tschneidereit
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IInjector</apiBaseInterface><apiBaseClassifier>org.swiftsuspenders:Injector</apiBaseClassifier></apiClassifierDef><apiDesc>
	 SwiftSuspender <codeph>IInjector</codeph> adpater - See: <xref href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</xref>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.adapters:SwiftSuspendersInjector:SwiftSuspendersInjector"><apiName>SwiftSuspendersInjector</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>xmlConfig</apiItemName><apiType value="XML"/><apiData>null</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.adapters:SwiftSuspendersInjector:createChild"><apiName>createChild</apiName><shortdesc>
		 
		 Create an injector that inherits rules from its parent
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The injector 
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IInjector</apiOperationClassifier></apiReturn><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 
		 Create an injector that inherits rules from its parent
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.adapters:SwiftSuspendersInjector:protected:XML_CONFIG"><apiName>XML_CONFIG</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>unknown</apiData><apiType value="XML"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.adapters:SwiftSuspendersInjector:applicationDomain:get"><apiName>applicationDomain</apiName><shortdesc>
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:ApplicationDomain"/></apiValueDef><apiDesc>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.adapters:SwiftSuspendersReflector"><apiName>SwiftSuspendersReflector</apiName><shortdesc>
	 SwiftSuspender IReflector adpater - See: SwiftSuspenders
	 
	 </shortdesc><prolog><author>tschneidereit
	 </author><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IReflector</apiBaseInterface><apiBaseClassifier>org.swiftsuspenders:Reflector</apiBaseClassifier></apiClassifierDef><apiDesc>
	 SwiftSuspender <codeph>IReflector</codeph> adpater - See: <xref href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</xref>
	 
	 </apiDesc></apiClassifierDetail></apiClassifier></apiPackage><apiPackage id="org.robotlegs.starling.base"><apiName>org.robotlegs.starling.base</apiName><apiDetail/><apiClassifier id="org.robotlegs.starling.base:ContextBase"><apiName>ContextBase</apiName><shortdesc>
	 An abstract IContext implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IContext</apiBaseInterface><apiBaseClassifier>starling.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An abstract <codeph>IContext</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:ContextBase:ContextBase"><apiName>ContextBase</apiName><shortdesc>
		 Abstract Context Implementation
		 
		 Extend this class to create a Framework or Application context
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Abstract Context Implementation
		 
		 <p>Extend this class to create a Framework or Application context</p>
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="org.robotlegs.starling.base:ContextBase:eventDispatcher:get"><apiName>eventDispatcher</apiName><shortdesc>
		 
		 The IContext's EventDispatcher
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 
		 The <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.base:ContextEventType"><apiName>ContextEventType</apiName><shortdesc>
	 Framework event types
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Framework event types
	 </apiDesc></apiClassifierDetail><apiValue id="org.robotlegs.starling.base:ContextEventType:SHUTDOWN_COMPLETE"><apiName>SHUTDOWN_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>shutdownComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextEventType:SHUTDOWN"><apiName>SHUTDOWN</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>shutdown</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextEventType:STARTUP_COMPLETE"><apiName>STARTUP_COMPLETE</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startupComplete</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextEventType:STARTUP"><apiName>STARTUP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>startup</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.base:EventMap"><apiName>EventMap</apiName><shortdesc>
	 An abstract IEventMap implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IEventMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An abstract <codeph>IEventMap</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:EventMap:EventMap"><apiName>EventMap</apiName><shortdesc>
		 Creates a new EventMap object
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>eventDispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>An <codeph>IEventDispatcher</codeph> to treat as a bus
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new <codeph>EventMap</codeph> object
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.base:EventMap:mapListener"><apiName>mapListener</apiName><shortdesc>
		 The same as calling addEventListener directly on the EventDispatcher,
		 but keeps a list of listeners for easy (usually automatic) removal.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>The <codeph>IEventDispatcher</codeph> to listen to
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to listen for
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The <codeph>Event</codeph> handler
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>starling.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The same as calling <codeph>addEventListener</codeph> directly on the <codeph>EventDispatcher</codeph>,
		 but keeps a list of listeners for easy (usually automatic) removal.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:EventMap:protected:routeEventToListener"><apiName>routeEventToListener</apiName><shortdesc>
		 Event Handler
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The <codeph>Event</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>originalEventClass</apiItemName><apiType value="Class"/><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Event Handler
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:EventMap:unmapListener"><apiName>unmapListener</apiName><shortdesc>
		 The same as calling removeEventListener directly on the EventDispatcher,
		 but updates our local list of listeners.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>The <codeph>IEventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The <codeph>Event</codeph> handler
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>starling.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The same as calling <codeph>removeEventListener</codeph> directly on the <codeph>EventDispatcher</codeph>,
		 but updates our local list of listeners.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:EventMap:unmapListeners"><apiName>unmapListeners</apiName><shortdesc>
		 Removes all listeners registered through mapListener
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all listeners registered through <codeph>mapListener</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.base:EventMap:protected:eventDispatcher"><apiName>eventDispatcher</apiName><shortdesc>
		 The EventDispatcher
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 The <codeph>EventDispatcher</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:EventMap:dispatcherListeningEnabled:get"><apiName>dispatcherListeningEnabled</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.base:ContextError"><apiName>ContextError</apiName><shortdesc>
	 A framework Error implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A framework Error implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:ContextError:ContextError"><apiName>ContextError</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>message</apiItemName><apiType value="String"/><apiData/></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam></apiConstructorDef></apiConstructorDetail></apiConstructor><apiValue id="org.robotlegs.starling.base:ContextError:E_COMMANDMAP_NOIMPL"><apiName>E_COMMANDMAP_NOIMPL</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Command Class does not implement an execute() method</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextError:E_COMMANDMAP_OVR"><apiName>E_COMMANDMAP_OVR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Cannot overwrite map</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextError:E_CONTEXT_INJECTOR"><apiName>E_CONTEXT_INJECTOR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>The ContextBase does not specify a concrete IInjector. Please override the injector getter in your concrete or abstract Context.</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextError:E_CONTEXT_REFLECTOR"><apiName>E_CONTEXT_REFLECTOR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>The ContextBase does not specify a concrete IReflector. Please override the reflector getter in your concrete or abstract Context.</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextError:E_CONTEXT_VIEW_OVR"><apiName>E_CONTEXT_VIEW_OVR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Context contextView must only be set once</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextError:E_EVENTMAP_NOSNOOPING"><apiName>E_EVENTMAP_NOSNOOPING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Listening to the context eventDispatcher is not enabled for this EventMap</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextError:E_MEDIATORMAP_NOIMPL"><apiName>E_MEDIATORMAP_NOIMPL</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Mediator Class does not implement IMediator</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:ContextError:E_MEDIATORMAP_OVR"><apiName>E_MEDIATORMAP_OVR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>Mediator Class has already been mapped to a View Class in this context</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.base:MediatorMap"><apiName>MediatorMap</apiName><shortdesc>
	 An abstract IMediatorMap implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IMediatorMap</apiBaseInterface><apiBaseClassifier>org.robotlegs.starling.base:ViewMapBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An abstract <codeph>IMediatorMap</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:MediatorMap:MediatorMap"><apiName>MediatorMap</apiName><shortdesc>
		 Creates a new MediatorMap object
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>contextView</apiItemName><apiType value="starling.display:DisplayObjectContainer"/><apiDesc>The root view node of the context. The map will listen for ADDED_TO_STAGE events on this node
		 </apiDesc></apiParam><apiParam><apiItemName>injector</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IInjector</apiOperationClassifier><apiDesc>An <codeph>IInjector</codeph> to use for this context
		 </apiDesc></apiParam><apiParam><apiItemName>reflector</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IReflector</apiOperationClassifier><apiDesc>An <codeph>IReflector</codeph> to use for this context
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new <codeph>MediatorMap</codeph> object
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.base:MediatorMap:createMediator"><apiName>createMediator</apiName><shortdesc>
		 
		 Create an instance of a mapped IMediator
		 
		 This will instantiate and register a Mediator for a given View Component.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph>
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>An instance of the view Class previously mapped to an <codeph>IMediator</codeph> Class
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Create an instance of a mapped <codeph>IMediator</codeph>
		 
		 <p>This will instantiate and register a Mediator for a given View Component.
		 Mediator dependencies will be automatically resolved.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 
		 Check if the view Class has been mapped or not
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether this view class has been mapped
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Check if the view Class has been mapped or not
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:hasMediatorForView"><apiName>hasMediatorForView</apiName><shortdesc>
		 
		 Check if an IMediator has been registered for a view instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether an <codeph>IMediator</codeph> has been registered for this view instance
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Check if an <codeph>IMediator</codeph> has been registered for a view instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:hasMediator"><apiName>hasMediator</apiName><shortdesc>
		 
		 Check if the IMediator has been registered
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether this <codeph>IMediator</codeph> has been registered
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> instance
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Check if the <codeph>IMediator</codeph> has been registered
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:mapView"><apiName>mapView</apiName><shortdesc>
		 
		 Map an IMediator to a view Class
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 </apiDesc></apiParam><apiParam><apiItemName>mediatorClass</apiItemName><apiType value="Class"/><apiDesc>The <codeph>IMediator</codeph> Class
		 </apiDesc></apiParam><apiParam><apiItemName>injectViewAs</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>The explicit view Interface or Class that the mediator depends on OR an Array of such Interfaces/Classes.
		 </apiDesc></apiParam><apiParam><apiItemName>autoCreate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Automatically construct and register an instance of Class <codeph>mediatorClass</codeph> when an instance of Class <codeph>viewClass</codeph> is detected
		 </apiDesc></apiParam><apiParam><apiItemName>autoRemove</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Automatically remove an instance of Class <codeph>mediatorClass</codeph> when its <codeph>viewClass</codeph> leaves the ancestory of the context view
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Map an <codeph>IMediator</codeph> to a view Class
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:protected:onViewRemoved"><apiName>onViewRemoved</apiName><shortdesc>
		 Flex framework work-around part #5
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="starling.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Flex framework work-around part #5
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:registerMediator"><apiName>registerMediator</apiName><shortdesc>
		 
		 Manually register an IMediator instance
		 
		 NOTE: Registering a Mediator will NOT inject its dependencies.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view component for the <codeph>IMediator</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> to register
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Manually register an <codeph>IMediator</codeph> instance
		 
		 <p>NOTE: Registering a Mediator will NOT inject its dependencies.
		 It is assumed that dependencies are already satisfied.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:removeMediatorByView"><apiName>removeMediatorByView</apiName><shortdesc>
		 
		 Remove a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph> that was removed
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Remove a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:protected:removeMediatorLater"><apiName>removeMediatorLater</apiName><shortdesc>
		 Flex framework work-around part #6
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/></apiParam></apiOperationDef><apiDesc>
		 Flex framework work-around part #6
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:removeMediator"><apiName>removeMediator</apiName><shortdesc>
		 
		 Remove a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph> that was removed
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Remove a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:retrieveMediator"><apiName>retrieveMediator</apiName><shortdesc>
		 
		 Retrieve a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph>
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Retrieve a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorMap:unmapView"><apiName>unmapView</apiName><shortdesc>
		 
		 Unmap a view Class
		  
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Unmap a view Class
		  
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.base:ViewMapBase"><apiName>ViewMapBase</apiName><shortdesc>
	 A base ViewMap implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A base ViewMap implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:ViewMapBase:ViewMapBase"><apiName>ViewMapBase</apiName><shortdesc>
		 Creates a new ViewMap object
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>contextView</apiItemName><apiType value="starling.display:DisplayObjectContainer"/><apiDesc>The root view node of the context. The map will listen for ADDED_TO_STAGE events on this node
		 </apiDesc></apiParam><apiParam><apiItemName>injector</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IInjector</apiOperationClassifier><apiDesc>An <codeph>IInjector</codeph> to use for this context
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new <codeph>ViewMap</codeph> object
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="org.robotlegs.starling.base:ViewMapBase:contextView:get"><apiName>contextView</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="org.robotlegs.starling.base:ViewMapBase:enabled:get"><apiName>enabled</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.base:MediatorBase"><apiName>MediatorBase</apiName><shortdesc>
	 An abstract IMediator implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IMediator</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An abstract <codeph>IMediator</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:MediatorBase:MediatorBase"><apiName>MediatorBase</apiName><shortdesc>
		 Creates a new Mediator object
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 Creates a new <codeph>Mediator</codeph> object
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.base:MediatorBase:protected:checkFeathers"><apiName>checkFeathers</apiName><shortdesc>
		 Feathers work-around part #3
		 
		 Checks for availability of Feathers by trying to get the class for IFeathersControl.
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiStatic/><apiReturn><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
		 Feathers work-around part #3
		 
		 <p>Checks for availability of Feathers by trying to get the class for IFeathersControl.</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorBase:getViewComponent"><apiName>getViewComponent</apiName><shortdesc>
		 
		 The IMediator's view component
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The view component
		 </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
		 
		 The <codeph>IMediator</codeph>'s view component
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorBase:protected:onCreationComplete"><apiName>onCreationComplete</apiName><shortdesc>
		 Feathers work-around part #4
		 
		 FeathersEventType.CREATION_COMPLETE handler for this Mediator's View Component
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="starling.events:Event"/><apiDesc>The event
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Feathers work-around part #4
		 
		 <p><codeph>FeathersEventType.CREATION_COMPLETE</codeph> handler for this Mediator's View Component</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorBase:onRegister"><apiName>onRegister</apiName><shortdesc>
		 
		 Should be invoked by the IMediator itself when it is ready to be interacted with
		 
		 Override and place your initialization code here
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Should be invoked by the <codeph>IMediator</codeph> itself when it is ready to be interacted with
		 
		 <p>Override and place your initialization code here</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorBase:onRemove"><apiName>onRemove</apiName><shortdesc>
		 
		 Should be invoked by the IMediator itself when it is ready to for cleanup
		 
		 Override and place your cleanup code here
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Should be invoked by the <codeph>IMediator</codeph> itself when it is ready to for cleanup
		 
		 <p>Override and place your cleanup code here</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorBase:preRegister"><apiName>preRegister</apiName><shortdesc>
		 
		 Should be invoked by the IMediatorMap during IMediator registration
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Should be invoked by the <codeph>IMediatorMap</codeph> during <codeph>IMediator</codeph> registration
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorBase:preRemove"><apiName>preRemove</apiName><shortdesc>
		 
		 Invoked when the IMediator has been removed by the IMediatorMap
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Invoked when the <codeph>IMediator</codeph> has been removed by the <codeph>IMediatorMap</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:MediatorBase:setViewComponent"><apiName>setViewComponent</apiName><shortdesc>
		 
		 The IMediator's view component
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>view component
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 The <codeph>IMediator</codeph>'s view component
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.base:MediatorBase:protected:FeathersControlType"><apiName>FeathersControlType</apiName><shortdesc>
		 Feathers work-around part #1
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiStatic/><apiType value="Class"/></apiValueDef><apiDesc>
		 Feathers work-around part #1
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:MediatorBase:protected:feathersAvailable"><apiName>feathersAvailable</apiName><shortdesc>
		 Feathers work-around part #2
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="protected"/><apiStatic/><apiData>unknown</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Feathers work-around part #2
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:MediatorBase:protected:removed"><apiName>removed</apiName><shortdesc>
		 Internal
		 
		 In the case of deffered instantiation, onRemove might get called before
		 onCreationComplete has fired.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 Internal
		 
		 <p>In the case of deffered instantiation, onRemove might get called before
		 onCreationComplete has fired. This here Bool helps us track that scenario.</p>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:MediatorBase:protected:viewComponent"><apiName>viewComponent</apiName><shortdesc>
		 Internal
		 
		 This Mediator's View Component - used by the RobotLegs MVCS framework internally.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
		 Internal
		 
		 <p>This Mediator's View Component - used by the RobotLegs MVCS framework internally.
		 You should declare a dependency on a concrete view component in your
		 implementation instead of working with this property</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.base:ViewMap"><apiName>ViewMap</apiName><shortdesc>
	 An abstract IViewMap implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IViewMap</apiBaseInterface><apiBaseClassifier>org.robotlegs.starling.base:ViewMapBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An abstract <codeph>IViewMap</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:ViewMap:ViewMap"><apiName>ViewMap</apiName><shortdesc>
		 Creates a new ViewMap object
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>contextView</apiItemName><apiType value="starling.display:DisplayObjectContainer"/><apiDesc>The root view node of the context. The map will listen for ADDED_TO_STAGE events on this node
		 </apiDesc></apiParam><apiParam><apiItemName>injector</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IInjector</apiOperationClassifier><apiDesc>An <codeph>IInjector</codeph> to use for this context
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new <codeph>ViewMap</codeph> object
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.base:ViewMap:hasPackage"><apiName>hasPackage</apiName><shortdesc>
		 
		 Check if a package has been registered for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether a package has been registered for automatic injection
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Check if a package has been registered for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:ViewMap:hasType"><apiName>hasType</apiName><shortdesc>
		 
		 Check if a class or interface has been registered for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether an interface has been registered for automatic injection
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view interface 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Check if a class or interface has been registered for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:ViewMap:protected:injectInto"><apiName>injectInto</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="starling.display:DisplayObject"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:ViewMap:mapPackage"><apiName>mapPackage</apiName><shortdesc>
		 
		 Map an entire package (including sub-packages) for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Map an entire package (including sub-packages) for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:ViewMap:mapType"><apiName>mapType</apiName><shortdesc>
		 
		 Map a view component class or interface for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view Interface
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Map a view component class or interface for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:ViewMap:unmapPackage"><apiName>unmapPackage</apiName><shortdesc>
		 
		 Unmap a package
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Unmap a package
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:ViewMap:unmapType"><apiName>unmapType</apiName><shortdesc>
		 
		 Unmap a view component class or interface
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view Interface
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Unmap a view component class or interface
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.base:CommandMap"><apiName>CommandMap</apiName><shortdesc>
	 An abstract ICommandMap implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:ICommandMap</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 An abstract <codeph>ICommandMap</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.base:CommandMap:CommandMap"><apiName>CommandMap</apiName><shortdesc>
		 Creates a new CommandMap object
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>eventDispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>The <codeph>EventDispatcher</codeph> to listen to
		 </apiDesc></apiParam><apiParam><apiItemName>injector</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IInjector</apiOperationClassifier><apiDesc>An <codeph>IInjector</codeph> to use for this context
		 </apiDesc></apiParam><apiParam><apiItemName>reflector</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IReflector</apiOperationClassifier><apiDesc>An <codeph>IReflector</codeph> to use for this context
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new <codeph>CommandMap</codeph> object
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.base:CommandMap:detain"><apiName>detain</apiName><shortdesc>
		 
		 Detain a Command instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiType value="Object"/><apiDesc>The Command instance to detain
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Detain a Command instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:execute"><apiName>execute</apiName><shortdesc>
		 
		 Execute a Command with an optional payload
		 
		 The commandClass must implement an execute() method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to instantiate - must have an execute() method
		 </apiDesc></apiParam><apiParam><apiItemName>payload</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>An optional payload
		 </apiDesc></apiParam><apiParam><apiItemName>payloadClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc> An optional class to inject the payload as
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name for the payload injection
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Execute a Command with an optional payload
		 
		 <p>The <codeph>commandClass</codeph> must implement an execute() method</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:hasEventCommand"><apiName>hasEventCommand</apiName><shortdesc>
		 
		 Check if a Class has been mapped to an Event type
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether the Class is mapped to this Event type
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Check if a Class has been mapped to an Event type
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:mapEvent"><apiName>mapEvent</apiName><shortdesc>
		 
		 Map a Class to an Event type
		 
		 The commandClass must implement an execute() method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type to listen for
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to instantiate - must have an execute() method
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>. Your commandClass can optionally [Inject] a variable of this type to access the event that triggered the command.
		 </apiDesc></apiParam><apiParam><apiItemName>oneshot</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Unmap the Class after execution?
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Map a Class to an Event type
		 
		 <p>The <codeph>commandClass</codeph> must implement an execute() method</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:release"><apiName>release</apiName><shortdesc>
		 
		 Release a Command instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiType value="Object"/><apiDesc>The Command instance to release for garbage collection
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Release a Command instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:protected:routeEventToCommand"><apiName>routeEventToCommand</apiName><shortdesc>
		 Event Handler
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>true</codeph> if the event was routed to a Command and the Command was executed,
                 <codeph>false</codeph> otherwise
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The <codeph>Event</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to construct and execute
		 </apiDesc></apiParam><apiParam><apiItemName>oneshot</apiItemName><apiType value="Boolean"/><apiDesc>Should this command mapping be removed after execution?
         </apiDesc></apiParam><apiParam><apiItemName>originalEventClass</apiItemName><apiType value="Class"/></apiParam></apiOperationDef><apiDesc>
		 Event Handler
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:unmapEvent"><apiName>unmapEvent</apiName><shortdesc>
		 
		 Unmap a Class to Event type mapping
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to unmap
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 Unmap a Class to Event type mapping
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:unmapEvents"><apiName>unmapEvents</apiName><shortdesc>
		 
		 Removes all mappings made through mapEvent
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 Removes all mappings made through <codeph>mapEvent</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.base:CommandMap:protected:verifyCommandClass"><apiName>verifyCommandClass</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiException><apiDesc/><apiItemName>org.robotlegs.starling.base::ContextError
		</apiItemName><apiOperationClassifier>org.robotlegs.starling.base::ContextError
		</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/></apiParam></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.base:CommandMap:protected:detainedCommands"><apiName>detainedCommands</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:CommandMap:protected:eventDispatcher"><apiName>eventDispatcher</apiName><shortdesc>
		 The EventDispatcher to listen to
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 The <codeph>EventDispatcher</codeph> to listen to
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:CommandMap:protected:eventTypeMap"><apiName>eventTypeMap</apiName><shortdesc>
		 Internal
		 
		 TODO: This needs to be documented
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
		 Internal
		 
		 TODO: This needs to be documented
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:CommandMap:protected:injector"><apiName>injector</apiName><shortdesc>
		 The IInjector to inject with
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IInjector</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IInjector</codeph> to inject with
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:CommandMap:protected:reflector"><apiName>reflector</apiName><shortdesc>
		 The IReflector to reflect with
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IReflector</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IReflector</codeph> to reflect with
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.base:CommandMap:protected:verifiedCommandClasses"><apiName>verifiedCommandClasses</apiName><shortdesc>
		 Internal
		 
		 Collection of command classes that have been verified to implement an execute method
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
		 Internal
		 
		 Collection of command classes that have been verified to implement an <codeph>execute</codeph> method
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage><apiPackage id="org.robotlegs.starling.core"><apiName>org.robotlegs.starling.core</apiName><apiDetail/><apiClassifier id="org.robotlegs.starling.core:IContext"><apiName>IContext</apiName><shortdesc>
	 The Robotlegs Context contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Context contract
	 </apiDesc></apiClassifierDetail><apiValue id="org.robotlegs.starling.core:IContext:org.robotlegs.starling.core:IContext:eventDispatcher:get"><apiName>eventDispatcher</apiName><shortdesc>
		 The IContext's EventDispatcher
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 The <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IEventMap"><apiName>IEventMap</apiName><shortdesc>
	 The Robotlegs EventMap contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs EventMap contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IEventMap:org.robotlegs.starling.core:IEventMap:mapListener"><apiName>mapListener</apiName><shortdesc>
		 The same as calling addEventListener directly on the EventDispatcher,
		 but keeps a list of listeners for easy (usually automatic) removal.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>The <codeph>IEventDispatcher</codeph> to listen to
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to listen for
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The <codeph>Event</codeph> handler
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>starling.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The same as calling <codeph>addEventListener</codeph> directly on the <codeph>EventDispatcher</codeph>,
		 but keeps a list of listeners for easy (usually automatic) removal.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IEventMap:org.robotlegs.starling.core:IEventMap:unmapListener"><apiName>unmapListener</apiName><shortdesc>
		 The same as calling removeEventListener directly on the EventDispatcher,
		 but updates our local list of listeners.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>The <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The <codeph>Event</codeph> handler
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>starling.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The same as calling <codeph>removeEventListener</codeph> directly on the <codeph>EventDispatcher</codeph>,
		 but updates our local list of listeners.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IEventMap:org.robotlegs.starling.core:IEventMap:unmapListeners"><apiName>unmapListeners</apiName><shortdesc>
		 Removes all listeners registered through mapListener
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all listeners registered through <codeph>mapListener</codeph>
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IMediatorMap"><apiName>IMediatorMap</apiName><shortdesc>
	 The Robotlegs MediatorMap contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs MediatorMap contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:createMediator"><apiName>createMediator</apiName><shortdesc>
		 Create an instance of a mapped IMediator
		 
		 This will instantiate and register a Mediator for a given View Component.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph>
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>An instance of the view Class previously mapped to an <codeph>IMediator</codeph> Class
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create an instance of a mapped <codeph>IMediator</codeph>
		 
		 <p>This will instantiate and register a Mediator for a given View Component.
		 Mediator dependencies will be automatically resolved.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 Check if the view Class has been mapped or not
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether this view class has been mapped
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if the view Class has been mapped or not
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:hasMediatorForView"><apiName>hasMediatorForView</apiName><shortdesc>
		 Check if an IMediator has been registered for a view instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether an <codeph>IMediator</codeph> has been registered for this view instance
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if an <codeph>IMediator</codeph> has been registered for a view instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:hasMediator"><apiName>hasMediator</apiName><shortdesc>
		 Check if the IMediator has been registered
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether this <codeph>IMediator</codeph> has been registered
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> instance
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if the <codeph>IMediator</codeph> has been registered
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:mapView"><apiName>mapView</apiName><shortdesc>
		 Map an IMediator to a view Class
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 </apiDesc></apiParam><apiParam><apiItemName>mediatorClass</apiItemName><apiType value="Class"/><apiDesc>The <codeph>IMediator</codeph> Class
		 </apiDesc></apiParam><apiParam><apiItemName>injectViewAs</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>The explicit view Interface or Class that the mediator depends on OR an Array of such Interfaces/Classes.
		 </apiDesc></apiParam><apiParam><apiItemName>autoCreate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Automatically construct and register an instance of Class <codeph>mediatorClass</codeph> when an instance of Class <codeph>viewClass</codeph> is detected
		 </apiDesc></apiParam><apiParam><apiItemName>autoRemove</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Automatically remove an instance of Class <codeph>mediatorClass</codeph> when its <codeph>viewClass</codeph> leaves the ancestory of the context view
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map an <codeph>IMediator</codeph> to a view Class
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:registerMediator"><apiName>registerMediator</apiName><shortdesc>
		 Manually register an IMediator instance
		 
		 NOTE: Registering a Mediator will NOT inject its dependencies.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view component for the <codeph>IMediator</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> to register
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Manually register an <codeph>IMediator</codeph> instance
		 
		 <p>NOTE: Registering a Mediator will NOT inject its dependencies.
		 It is assumed that dependencies are already satisfied.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:removeMediatorByView"><apiName>removeMediatorByView</apiName><shortdesc>
		 Remove a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph> that was removed
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:removeMediator"><apiName>removeMediator</apiName><shortdesc>
		 Remove a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph> that was removed
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:retrieveMediator"><apiName>retrieveMediator</apiName><shortdesc>
		 Retrieve a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph>
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieve a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:unmapView"><apiName>unmapView</apiName><shortdesc>
		 Unmap a view Class
		  
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a view Class
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:contextView:get"><apiName>contextView</apiName><shortdesc>
		 The IMediatorMap's DisplayObjectContainer
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
		 The <codeph>IMediatorMap</codeph>'s <codeph>DisplayObjectContainer</codeph>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:enabled:get"><apiName>enabled</apiName><shortdesc>
		 The IMediatorMap's enabled status
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The <codeph>IMediatorMap</codeph>'s enabled status
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IReflector"><apiName>IReflector</apiName><shortdesc>
	 The Robotlegs Reflector contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Reflector contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IReflector:org.robotlegs.starling.core:IReflector:classExtendsOrImplements"><apiName>classExtendsOrImplements</apiName><shortdesc>
		 Does this class or class name implement this superclass or interface?
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolean
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>classOrClassName</apiItemName><apiType value="Object"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>superclass</apiItemName><apiType value="Class"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Does this class or class name implement this superclass or interface?
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IReflector:org.robotlegs.starling.core:IReflector:getClass"><apiName>getClass</apiName><shortdesc>
		 Get the class of this instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Class
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The instance
		 </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Get the class of this instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IReflector:org.robotlegs.starling.core:IReflector:getFQCN"><apiName>getFQCN</apiName><shortdesc>
		 Get the Fully Qualified Class Name of this instance, class name, or class
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The Fully Qualified Class Name
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The instance, class name, or class
		 </apiDesc></apiParam><apiParam><apiItemName>replaceColons</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Get the Fully Qualified Class Name of this instance, class name, or class
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IMediator"><apiName>IMediator</apiName><shortdesc>
	 The Robotlegs Mediator contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Mediator contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:getViewComponent"><apiName>getViewComponent</apiName><shortdesc>
		 The IMediator's view component
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The view component
		 </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
		 The <codeph>IMediator</codeph>'s view component
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:onRegister"><apiName>onRegister</apiName><shortdesc>
		 Should be invoked by the IMediator itself when it is ready to be interacted with
		 
		 Override and place your initialization code here
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Should be invoked by the <codeph>IMediator</codeph> itself when it is ready to be interacted with
		 
		 <p>Override and place your initialization code here</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:onRemove"><apiName>onRemove</apiName><shortdesc>
		 Should be invoked by the IMediator itself when it is ready to for cleanup
		 
		 Override and place your cleanup code here
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Should be invoked by the <codeph>IMediator</codeph> itself when it is ready to for cleanup
		 
		 <p>Override and place your cleanup code here</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:preRegister"><apiName>preRegister</apiName><shortdesc>
		 Should be invoked by the IMediatorMap during IMediator registration
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Should be invoked by the <codeph>IMediatorMap</codeph> during <codeph>IMediator</codeph> registration
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:preRemove"><apiName>preRemove</apiName><shortdesc>
		 Invoked when the IMediator has been removed by the IMediatorMap
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Invoked when the <codeph>IMediator</codeph> has been removed by the <codeph>IMediatorMap</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:setViewComponent"><apiName>setViewComponent</apiName><shortdesc>
		 The IMediator's view component
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>view component
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The <codeph>IMediator</codeph>'s view component
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IInjector"><apiName>IInjector</apiName><shortdesc>
	 The Robotlegs Injector contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Injector contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:createChild"><apiName>createChild</apiName><shortdesc>
		 Create an injector that inherits rules from its parent
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The injector 
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IInjector</apiOperationClassifier></apiReturn><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Create an injector that inherits rules from its parent
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:getInstance"><apiName>getInstance</apiName><shortdesc>
		 Create or retrieve an instance of the given class
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create or retrieve an instance of the given class
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 Does a rule exist to satsify such a request?
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether such a mapping exists
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Does a rule exist to satsify such a request?
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:injectInto"><apiName>injectInto</apiName><shortdesc>
		 Perform an injection into an object, satisfying all it's dependencies
		 
		 The IInjector should throw an Error
		 if it can't satisfy all dependencies of the injectee.
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>The object to inject into - the Injectee
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Perform an injection into an object, satisfying all it's dependencies
		 
		 <p>The <codeph>IInjector</codeph> should throw an <codeph>Error</codeph>
		 if it can't satisfy all dependencies of the injectee.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:instantiate"><apiName>instantiate</apiName><shortdesc>
		 Create an object of the given class, supplying its dependencies as constructor parameters
		 if the used DI solution has support for constructor injection
		 
		 Adapters for DI solutions that don't support constructor injection should just create a new
		 instance and perform setter and/ or method injection on that.
		 
		 NOTE: This method will always create a new instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The created instance
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>The class to instantiate
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create an object of the given class, supplying its dependencies as constructor parameters
		 if the used DI solution has support for constructor injection
		 
		 <p>Adapters for DI solutions that don't support constructor injection should just create a new
		 instance and perform setter and/ or method injection on that.</p>
		 
		 <p>NOTE: This method will always create a new instance. If you need to retrieve an instance
		 consider using <codeph>getInstance</codeph></p>
		 
		 <p>The <codeph>IInjector</codeph> should throw an <codeph>Error</codeph>
		 if it can't satisfy all dependencies of the injectee.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapClass"><apiName>mapClass</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject a new instance of instantiateClass.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>instantiateClass</apiItemName><apiType value="Class"/><apiDesc>A class to instantiate
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject a new instance of <codeph>instantiateClass</codeph>.
		 
		 <p>This will create a new instance for each injection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapRule"><apiName>mapRule</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 use rule useRule to determine the correct injection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>useRule</apiItemName><apiType value="any"/><apiDesc>The rule to use for the injection
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 use rule <codeph>useRule</codeph> to determine the correct injection.
		 
		 <p>This will use whatever injection is set by the given injection rule as created using 
		 one of the other mapping methods.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapSingletonOf"><apiName>mapSingletonOf</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject an instance of useSingletonOf.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>useSingletonOf</apiItemName><apiType value="Class"/><apiDesc>A class to instantiate
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject an instance of <codeph>useSingletonOf</codeph>.
		 
		 <p>This will create an instance on the first injection, but
		 will re-use that instance for subsequent injections.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapSingleton"><apiName>mapSingleton</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject an instance of whenAskedFor.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject an instance of <codeph>whenAskedFor</codeph>.
		 
		 <p>This will create an instance on the first injection, but
		 will re-use that instance for subsequent injections.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapValue"><apiName>mapValue</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject the instance useValue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>useValue</apiItemName><apiType value="Object"/><apiDesc>An instance
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject the instance <codeph>useValue</codeph>.
		 
		 <p>This is used to register an existing instance with the injector
		 and treat it like a Singleton.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:unmap"><apiName>unmap</apiName><shortdesc>
		 Remove a rule from the injector
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a rule from the injector
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:applicationDomain:get"><apiName>applicationDomain</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:ApplicationDomain"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IViewMap"><apiName>IViewMap</apiName><shortdesc>
	 The Robotlegs ViewMap contract.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs ViewMap contract. All IViewMap automatic injections occur AFTER the view components are added to the stage.
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:hasPackage"><apiName>hasPackage</apiName><shortdesc>
		 Check if a package has been registered for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether a package has been registered for automatic injection
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if a package has been registered for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:hasType"><apiName>hasType</apiName><shortdesc>
		 Check if a class or interface has been registered for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether an interface has been registered for automatic injection
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view interface 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if a class or interface has been registered for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:mapPackage"><apiName>mapPackage</apiName><shortdesc>
		 Map an entire package (including sub-packages) for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map an entire package (including sub-packages) for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:mapType"><apiName>mapType</apiName><shortdesc>
		 Map a view component class or interface for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view Interface
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map a view component class or interface for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:unmapPackage"><apiName>unmapPackage</apiName><shortdesc>
		 Unmap a package
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a package
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:unmapType"><apiName>unmapType</apiName><shortdesc>
		 Unmap a view component class or interface
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view Interface
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a view component class or interface
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:contextView:get"><apiName>contextView</apiName><shortdesc>
		 The IViewMap's DisplayObjectContainer
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
		 The <codeph>IViewMap</codeph>'s <codeph>DisplayObjectContainer</codeph>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:enabled:get"><apiName>enabled</apiName><shortdesc>
		 The IViewMap's enabled status
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The <codeph>IViewMap</codeph>'s enabled status
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:ICommandMap"><apiName>ICommandMap</apiName><shortdesc>
	 The Robotlegs CommandMap contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs CommandMap contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:detain"><apiName>detain</apiName><shortdesc>
		 Detain a Command instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiType value="Object"/><apiDesc>The Command instance to detain
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Detain a Command instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:execute"><apiName>execute</apiName><shortdesc>
		 Execute a Command with an optional payload
		 
		 The commandClass must implement an execute() method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc/><apiItemName>org.robotlegs.starling.base::ContextError
		</apiItemName><apiOperationClassifier>org.robotlegs.starling.base::ContextError
		</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to instantiate - must have an execute() method
		 </apiDesc></apiParam><apiParam><apiItemName>payload</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>An optional payload
		 </apiDesc></apiParam><apiParam><apiItemName>payloadClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc> An optional class to inject the payload as
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name for the payload injection
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Execute a Command with an optional payload
		 
		 <p>The <codeph>commandClass</codeph> must implement an execute() method</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:hasEventCommand"><apiName>hasEventCommand</apiName><shortdesc>
		 Check if a Class has been mapped to an Event type
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether the Class is mapped to this Event type
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if a Class has been mapped to an Event type
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:mapEvent"><apiName>mapEvent</apiName><shortdesc>
		 Map a Class to an Event type
		 
		 The commandClass must implement an execute() method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc/><apiItemName>org.robotlegs.starling.base::ContextError
		</apiItemName><apiOperationClassifier>org.robotlegs.starling.base::ContextError
		</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type to listen for
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to instantiate - must have an execute() method
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>. Your commandClass can optionally [Inject] a variable of this type to access the event that triggered the command.
		 </apiDesc></apiParam><apiParam><apiItemName>oneshot</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Unmap the Class after execution?
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map a Class to an Event type
		 
		 <p>The <codeph>commandClass</codeph> must implement an execute() method</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:release"><apiName>release</apiName><shortdesc>
		 Release a Command instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiType value="Object"/><apiDesc>The Command instance to release for garbage collection
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Release a Command instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:unmapEvent"><apiName>unmapEvent</apiName><shortdesc>
		 Unmap a Class to Event type mapping
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to unmap
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a Class to Event type mapping
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:unmapEvents"><apiName>unmapEvents</apiName><shortdesc>
		 Removes all mappings made through mapEvent
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all mappings made through <codeph>mapEvent</codeph>
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage><apiPackage id="org.robotlegs.starling.mvcs"><apiName>org.robotlegs.starling.mvcs</apiName><apiDetail/><apiClassifier id="org.robotlegs.starling.mvcs:Command"><apiName>Command</apiName><shortdesc>
	 Abstract MVCS command implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS command implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.mvcs:Command:Command"><apiName>Command</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Command:protected:dispatchWith"><apiName>dispatchWith</apiName><shortdesc>
		 Dispatch helper method with pooling
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether the event bubbles
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The payload to include with the event
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method with pooling
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Command:protected:dispatch"><apiName>dispatch</apiName><shortdesc>
		 Dispatch helper method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The <codeph>Event</codeph> to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Command:execute"><apiName>execute</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Command:commandMap"><apiName>commandMap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:ICommandMap</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:contextView"><apiName>contextView</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:eventDispatcher"><apiName>eventDispatcher</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="starling.events:EventDispatcher"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:injector"><apiName>injector</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IInjector</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Command:mediatorMap"><apiName>mediatorMap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IMediatorMap</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.mvcs:Mediator"><apiName>Mediator</apiName><shortdesc>
	 Abstract MVCS IMediator implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>org.robotlegs.starling.base:MediatorBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS <codeph>IMediator</codeph> implementation
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.mvcs:Mediator:Mediator"><apiName>Mediator</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:addContextListener"><apiName>addContextListener</apiName><shortdesc>
		 Syntactical sugar for mapping a listener to an EventDispatcher
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for mapping a listener to an <codeph>EventDispatcher</codeph>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:addViewListener"><apiName>addViewListener</apiName><shortdesc>
		 Syntactical sugar for mapping a listener to the viewComponent 
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for mapping a listener to the <codeph>viewComponent</codeph> 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:dispatchWith"><apiName>dispatchWith</apiName><shortdesc>
		 Dispatch helper method with pooling
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether the event bubbles
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The payload to include with the event
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method with pooling
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:dispatch"><apiName>dispatch</apiName><shortdesc>
		 Dispatch helper method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The Event to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:preRemove"><apiName>preRemove</apiName><shortdesc>
		 
		 
		 Invoked when the IMediator has been removed by the IMediatorMap
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 
		 
		 Invoked when the <codeph>IMediator</codeph> has been removed by the <codeph>IMediatorMap</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:removeContextListener"><apiName>removeContextListener</apiName><shortdesc>
		 Syntactical sugar for unmapping a listener from an IEventDispatcher
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for unmapping a listener from an <codeph>IEventDispatcher</codeph>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Mediator:protected:removeViewListener"><apiName>removeViewListener</apiName><shortdesc>
		 Syntactical sugar for mapping a listener from the viewComponent
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Syntactical sugar for mapping a listener from the <codeph>viewComponent</codeph>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Mediator:contextView"><apiName>contextView</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Mediator:mediatorMap"><apiName>mediatorMap</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>org.robotlegs.starling.core:IMediatorMap</apiValueClassifier></apiValueDef></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Mediator:eventDispatcher:get"><apiName>eventDispatcher</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="org.robotlegs.starling.mvcs:Mediator:protected:eventMap:get"><apiName>eventMap</apiName><shortdesc>
		 Local EventMap
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>org.robotlegs.starling.core:IEventMap</apiValueClassifier></apiValueDef><apiDesc>
		 Local EventMap
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.mvcs:Context"><apiName>Context</apiName><shortdesc>
	 Abstract MVCS IContext implementation
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>org.robotlegs.starling.core:IContext</apiBaseInterface><apiBaseClassifier>org.robotlegs.starling.base:ContextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS <codeph>IContext</codeph> implementation
	 </apiDesc></apiClassifierDetail><adobeApiEvent id="org.robotlegs.starling.mvcs:Context_org.robotlegs.starling.base.ContextEventType.STARTUP_COMPLETE_startupComplete"><apiName>startupComplete</apiName><shortdesc>
	 Dispatched by the startup() method when it finishes
	 executing.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.robotlegs.starling.base.ContextEventType.STARTUP_COMPLETE</apiEventType><adobeApiEventClassifier>starling.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
	 Dispatched by the <codeph>startup()</codeph> method when it finishes
	 executing.
	 
	 <p>One common pattern for application startup/bootstrapping makes use
	 of the <codeph>startupComplete</codeph> event. In this pattern, you do the
	 following:</p>
	 <ul>
	   <li>Override the <codeph>startup()</codeph> method in your Context 
	       subclass and set up application mappings in your 
	       <codeph>startup()</codeph> override as you always do in Robotlegs.</li>
	   <li>Create commands that perform startup/bootstrapping operations
	       such as loading the initial data, checking for application updates,
	       etc.</li>
	   <li><p>Map those commands to the <codeph>ContextEvent.STARTUP_COMPLETE</codeph>
	       event:</p>
	       <codeblock>commandMap.mapEvent(ContextEvent.STARTUP_COMPLETE, LoadInitialDataCommand, ContextEvent, true):</codeblock>
	       </li>
	   <li>Dispatch the <codeph>startupComplete</codeph> (<codeph>ContextEvent.STARTUP_COMPLETE</codeph>)
	       event from your <codeph>startup()</codeph> override. You can do this
	       in one of two ways: dispatch the event yourself, or call 
	       <codeph>super.startup()</codeph>. (The Context class's 
	       <codeph>startup()</codeph> method dispatches the 
	       <codeph>startupComplete</codeph> event.)</li>
	 </ul>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="org.robotlegs.starling.mvcs.xml#Context/startup()"><linktext>startup()</linktext></link></related-links></adobeApiEvent><apiConstructor id="org.robotlegs.starling.mvcs:Context:Context"><apiName>Context</apiName><shortdesc>
		 Abstract Context Implementation
		 
		 Extend this class to create a Framework or Application context
		 
		 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>contextView</apiItemName><apiType value="starling.display:DisplayObjectContainer"/><apiData>null</apiData><apiDesc>The root view node of the context. The context will listen for ADDED_TO_STAGE events on this node
		 </apiDesc></apiParam><apiParam><apiItemName>autoStartup</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Should this context automatically invoke it's <codeph>startup</codeph> method when it's <codeph>contextView</codeph> arrives on Stage?
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Abstract Context Implementation
		 
		 <p>Extend this class to create a Framework or Application context</p>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Context:protected:mapInjections"><apiName>mapInjections</apiName><shortdesc>
		 Injection Mapping Hook
		 
		 Override this in your Framework context to change the default configuration
		 
		 Beware of collisions in your container
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Injection Mapping Hook
		 
		 <p>Override this in your Framework context to change the default configuration</p>
		 
		 <p>Beware of collisions in your container</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Context:shutdown"><apiName>shutdown</apiName><shortdesc>
		 The Startup Hook
		 
		 Override this in your Application context
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 The Startup Hook
		 
		 <p>Override this in your Application context</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Context:startup"><apiName>startup</apiName><shortdesc>
		 The Startup Hook
		 
		 Override this in your Application context
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 The Startup Hook
		 
		 <p>Override this in your Application context</p>
		 
		 </apiDesc></apiOperationDetail><adobeApiEvent id="org.robotlegs.starling.mvcs:Context:startup_startupComplete"><apiName>startupComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Dispatched at the end of the
		                        <codeph>startup()</codeph> method's execution. This
		                        is often used to trigger startup/bootstrapping
		                        commands by wiring them to this event and 
		                        calling <codeph>super.startup()</codeph> in the 
		                        last line of your <codeph>startup()</codeph>
		                        override.
		 </apiDesc></adobeApiEventDetail><shortdesc>Dispatched at the end of the
		                        startup() method's execution.</shortdesc></adobeApiEvent></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Context:protected:commandMap:get"><apiName>commandMap</apiName><shortdesc>
		 The ICommandMap for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:ICommandMap</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>ICommandMap</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:contextView:get"><apiName>contextView</apiName><shortdesc>
		 The DisplayObjectContainer that scopes this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
		 The <codeph>DisplayObjectContainer</codeph> that scopes this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:injector:get"><apiName>injector</apiName><shortdesc>
		 The IInjector for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IInjector</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IInjector</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:mediatorMap:get"><apiName>mediatorMap</apiName><shortdesc>
		 The IMediatorMap for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IMediatorMap</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IMediatorMap</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:reflector:get"><apiName>reflector</apiName><shortdesc>
		 The IReflector for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IReflector</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IReflector</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.mvcs:Context:protected:viewMap:get"><apiName>viewMap</apiName><shortdesc>
		 The IViewMap for this IContext
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>org.robotlegs.starling.core:IViewMap</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>IViewMap</codeph> for this <codeph>IContext</codeph>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.mvcs:Actor"><apiName>Actor</apiName><shortdesc>
	 Abstract MVCS IActor implementation
	 
	 As part of the MVCS implementation the Actor provides core functionality to an applications
	 various working parts.
	 
	 Some possible uses for the Actor include, but are no means limited to:
	 
	 
	 Service classes
	 Model classes
	 Controller classes
	 Presentation model classes
	 
	 
	 Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending Actor.
	 
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Abstract MVCS <codeph>IActor</codeph> implementation
	 
	 <p>As part of the MVCS implementation the <codeph>Actor</codeph> provides core functionality to an applications
	 various working parts.</p>
	 
	 <p>Some possible uses for the <codeph>Actor</codeph> include, but are no means limited to:</p>
	 
	 <ul>
	 <li>Service classes</li>
	 <li>Model classes</li>
	 <li>Controller classes</li>
	 <li>Presentation model classes</li>
	 </ul>
	 
	 <p>Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending <codeph>Actor</codeph>.</p>
	 
	 </apiDesc></apiClassifierDetail><apiConstructor id="org.robotlegs.starling.mvcs:Actor:Actor"><apiName>Actor</apiName><shortdesc/><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef></apiConstructorDetail></apiConstructor><apiOperation id="org.robotlegs.starling.mvcs:Actor:protected:dispatchWith"><apiName>dispatchWith</apiName><shortdesc>
		 Dispatch helper method with pooling
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Whether the event bubbles
		 </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>The payload to include with the event
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method with pooling
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.mvcs:Actor:protected:dispatch"><apiName>dispatch</apiName><shortdesc>
		 Dispatch helper method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="starling.events:Event"/><apiDesc>The <codeph>Event</codeph> to dispatch on the <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Dispatch helper method
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.mvcs:Actor:eventDispatcher:get"><apiName>eventDispatcher</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="org.robotlegs.starling.mvcs:Actor:protected:eventMap:get"><apiName>eventMap</apiName><shortdesc>
		 Local EventMap
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>org.robotlegs.starling.core:IEventMap</apiValueClassifier></apiValueDef><apiDesc>
		 Local EventMap
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage></allClasses>