<?xml version="1.0" encoding="UTF-8"?>
<allClasses>
   <apiPackage id="org.robotlegs.adapters">
      <apiName>org.robotlegs.adapters</apiName>
      <apiClassifier id="org.robotlegs.adapters:SwiftSuspendersInjector">
         <apiName>SwiftSuspendersInjector</apiName>
         <shortdesc>
	 SwiftSuspender IInjector adpater - See: SwiftSuspenders
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IInjector</apiBaseInterface>
               <apiBaseClassifier>org.swiftsuspenders:Injector</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 SwiftSuspender <codeph>IInjector</codeph> adpater - See: <xref href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</xref>
	 
	        </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.adapters:SwiftSuspendersReflector">
         <apiName>SwiftSuspendersReflector</apiName>
         <shortdesc>
	 SwiftSuspender IReflector adpater - See: SwiftSuspenders
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IReflector</apiBaseInterface>
               <apiBaseClassifier>org.swiftsuspenders:Reflector</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 SwiftSuspender <codeph>IReflector</codeph> adpater - See: <xref href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</xref>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.robotlegs.starling.base">
      <apiName>org.robotlegs.starling.base</apiName>
      <apiClassifier id="org.robotlegs.starling.base:ContextBase">
         <apiName>ContextBase</apiName>
         <shortdesc>
	 An abstract IContext implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IContext</apiBaseInterface>
               <apiBaseClassifier>starling.events:EventDispatcher</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An abstract <codeph>IContext</codeph> implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ContextEventType">
         <apiName>ContextEventType</apiName>
         <shortdesc>
	 Framework event types
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Framework event types
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:EventMap">
         <apiName>EventMap</apiName>
         <shortdesc>
	 An abstract IEventMap implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IEventMap</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An abstract <codeph>IEventMap</codeph> implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ContextError">
         <apiName>ContextError</apiName>
         <shortdesc>
	 A framework Error implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Error</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A framework Error implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:MediatorMap">
         <apiName>MediatorMap</apiName>
         <shortdesc>
	 An abstract IMediatorMap implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IMediatorMap</apiBaseInterface>
               <apiBaseClassifier>org.robotlegs.starling.base:ViewMapBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An abstract <codeph>IMediatorMap</codeph> implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ViewMapBase">
         <apiName>ViewMapBase</apiName>
         <shortdesc>
	 A base ViewMap implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 A base ViewMap implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:MediatorBase">
         <apiName>MediatorBase</apiName>
         <shortdesc>
	 An abstract IMediator implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IMediator</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An abstract <codeph>IMediator</codeph> implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:ViewMap">
         <apiName>ViewMap</apiName>
         <shortdesc>
	 An abstract IViewMap implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IViewMap</apiBaseInterface>
               <apiBaseClassifier>org.robotlegs.starling.base:ViewMapBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An abstract <codeph>IViewMap</codeph> implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.base:CommandMap">
         <apiName>CommandMap</apiName>
         <shortdesc>
	 An abstract ICommandMap implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:ICommandMap</apiBaseInterface>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 An abstract <codeph>ICommandMap</codeph> implementation
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.robotlegs.starling.core">
      <apiName>org.robotlegs.starling.core</apiName>
      <apiClassifier id="org.robotlegs.starling.core:IContext">
         <apiName>IContext</apiName>
         <shortdesc>
	 The Robotlegs Context contract
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs Context contract
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IEventMap">
         <apiName>IEventMap</apiName>
         <shortdesc>
	 The Robotlegs EventMap contract
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs EventMap contract
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IMediatorMap">
         <apiName>IMediatorMap</apiName>
         <shortdesc>
	 The Robotlegs MediatorMap contract
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs MediatorMap contract
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IReflector">
         <apiName>IReflector</apiName>
         <shortdesc>
	 The Robotlegs Reflector contract
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs Reflector contract
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IMediator">
         <apiName>IMediator</apiName>
         <shortdesc>
	 The Robotlegs Mediator contract
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs Mediator contract
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IInjector">
         <apiName>IInjector</apiName>
         <shortdesc>
	 The Robotlegs Injector contract
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs Injector contract
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:IViewMap">
         <apiName>IViewMap</apiName>
         <shortdesc>
	 The Robotlegs ViewMap contract.</shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs ViewMap contract. All IViewMap automatic injections occur AFTER the view components are added to the stage.
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.core:ICommandMap">
         <apiName>ICommandMap</apiName>
         <shortdesc>
	 The Robotlegs CommandMap contract
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiInterface/>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier/>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 The Robotlegs CommandMap contract
	 </apiDesc>
      </apiClassifier>
   </apiPackage>
   <apiPackage id="org.robotlegs.starling.mvcs">
      <apiName>org.robotlegs.starling.mvcs</apiName>
      <apiClassifier id="org.robotlegs.starling.mvcs:Command">
         <apiName>Command</apiName>
         <shortdesc>
	 Abstract MVCS command implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Abstract MVCS command implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.mvcs:Mediator">
         <apiName>Mediator</apiName>
         <shortdesc>
	 Abstract MVCS IMediator implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>org.robotlegs.starling.base:MediatorBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Abstract MVCS <codeph>IMediator</codeph> implementation
	 </apiDesc>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.mvcs:Context">
         <apiName>Context</apiName>
         <shortdesc>
	 Abstract MVCS IContext implementation
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseInterface>org.robotlegs.starling.core:IContext</apiBaseInterface>
               <apiBaseClassifier>org.robotlegs.starling.base:ContextBase</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Abstract MVCS <codeph>IContext</codeph> implementation
	 </apiDesc>
         <adobeApiEvent id="org.robotlegs.starling.mvcs:Context_org.robotlegs.starling.base.ContextEventType.STARTUP_COMPLETE_startupComplete">
            <apiName>startupComplete</apiName>
            <shortdesc>
	 Dispatched by the startup() method when it finishes
	 executing.</shortdesc>
            <prolog/>
            <adobeApiEventDetail>
               <adobeApiEventDef>
                  <apiEventType>org.robotlegs.starling.base.ContextEventType.STARTUP_COMPLETE</apiEventType>
                  <adobeApiEventClassifier>starling.events.Event</adobeApiEventClassifier>
                  <apiGeneratedEvent/>
               </adobeApiEventDef>
               <apiDesc>
	 Dispatched by the <codeph>startup()</codeph> method when it finishes
	 executing.
	 
	 <p>One common pattern for application startup/bootstrapping makes use
	 of the <codeph>startupComplete</codeph> event. In this pattern, you do the
	 following:</p>
	                 <ul>
	                    <li>Override the <codeph>startup()</codeph> method in your Context 
	       subclass and set up application mappings in your 
	       <codeph>startup()</codeph> override as you always do in Robotlegs.</li>
	                    <li>Create commands that perform startup/bootstrapping operations
	       such as loading the initial data, checking for application updates,
	       etc.</li>
	                    <li>
                        <p>Map those commands to the <codeph>ContextEvent.STARTUP_COMPLETE</codeph>
	       event:</p>
	                       <codeblock>commandMap.mapEvent(ContextEvent.STARTUP_COMPLETE, LoadInitialDataCommand, ContextEvent, true):</codeblock>
	                    </li>
	                    <li>Dispatch the <codeph>startupComplete</codeph> (<codeph>ContextEvent.STARTUP_COMPLETE</codeph>)
	       event from your <codeph>startup()</codeph> override. You can do this
	       in one of two ways: dispatch the event yourself, or call 
	       <codeph>super.startup()</codeph>. (The Context class's 
	       <codeph>startup()</codeph> method dispatches the 
	       <codeph>startupComplete</codeph> event.)</li>
	                 </ul>
	 
	              </apiDesc>
            </adobeApiEventDetail>
            <related-links>
               <link href="org.robotlegs.starling.mvcs.xml#Context/startup()">
                  <linktext>startup()</linktext>
               </link>
            </related-links>
         </adobeApiEvent>
      </apiClassifier>
      <apiClassifier id="org.robotlegs.starling.mvcs:Actor">
         <apiName>Actor</apiName>
         <shortdesc>
	 Abstract MVCS IActor implementation
	 
	 As part of the MVCS implementation the Actor provides core functionality to an applications
	 various working parts.
	 
	 Some possible uses for the Actor include, but are no means limited to:
	 
	 
	 Service classes
	 Model classes
	 Controller classes
	 Presentation model classes
	 
	 
	 Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending Actor.
	 
	 </shortdesc>
         <apiClassifierDetail>
            <apiClassifierDef>
               <apiAccess value="public"/>
               <apiStatic/>
               <apiBaseClassifier>Object</apiBaseClassifier>
            </apiClassifierDef>
         </apiClassifierDetail>
         <apiDesc>
	 Abstract MVCS <codeph>IActor</codeph> implementation
	 
	 <p>As part of the MVCS implementation the <codeph>Actor</codeph> provides core functionality to an applications
	 various working parts.</p>
	 
	           <p>Some possible uses for the <codeph>Actor</codeph> include, but are no means limited to:</p>
	 
	           <ul>
	              <li>Service classes</li>
	              <li>Model classes</li>
	              <li>Controller classes</li>
	              <li>Presentation model classes</li>
	           </ul>
	 
	           <p>Essentially any class where it might be advantageous to have basic dependency injection supplied is a candidate
	 for extending <codeph>Actor</codeph>.</p>
	 
	        </apiDesc>
      </apiClassifier>
   </apiPackage>
</allClasses>