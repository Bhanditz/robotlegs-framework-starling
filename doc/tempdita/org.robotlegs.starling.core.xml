<?xml version="1.0" encoding="UTF-8"?><apiPackage id="org.robotlegs.starling.core"><apiName>org.robotlegs.starling.core</apiName><apiDetail/><apiClassifier id="org.robotlegs.starling.core:IContext"><apiName>IContext</apiName><shortdesc>
	 The Robotlegs Context contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Context contract
	 </apiDesc></apiClassifierDetail><apiValue id="org.robotlegs.starling.core:IContext:org.robotlegs.starling.core:IContext:eventDispatcher:get"><apiName>eventDispatcher</apiName><shortdesc>
		 The IContext's EventDispatcher
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="starling.events:EventDispatcher"/></apiValueDef><apiDesc>
		 The <codeph>IContext</codeph>'s <codeph>EventDispatcher</codeph>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IEventMap"><apiName>IEventMap</apiName><shortdesc>
	 The Robotlegs EventMap contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs EventMap contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IEventMap:org.robotlegs.starling.core:IEventMap:mapListener"><apiName>mapListener</apiName><shortdesc>
		 The same as calling addEventListener directly on the EventDispatcher,
		 but keeps a list of listeners for easy (usually automatic) removal.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>The <codeph>IEventDispatcher</codeph> to listen to
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type to listen for
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The <codeph>Event</codeph> handler
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>starling.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The same as calling <codeph>addEventListener</codeph> directly on the <codeph>EventDispatcher</codeph>,
		 but keeps a list of listeners for easy (usually automatic) removal.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IEventMap:org.robotlegs.starling.core:IEventMap:unmapListener"><apiName>unmapListener</apiName><shortdesc>
		 The same as calling removeEventListener directly on the EventDispatcher,
		 but updates our local list of listeners.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dispatcher</apiItemName><apiType value="starling.events:EventDispatcher"/><apiDesc>The <codeph>EventDispatcher</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>The <codeph>Event</codeph> type
		 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The <codeph>Event</codeph> handler
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>starling.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The same as calling <codeph>removeEventListener</codeph> directly on the <codeph>EventDispatcher</codeph>,
		 but updates our local list of listeners.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IEventMap:org.robotlegs.starling.core:IEventMap:unmapListeners"><apiName>unmapListeners</apiName><shortdesc>
		 Removes all listeners registered through mapListener
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all listeners registered through <codeph>mapListener</codeph>
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IMediatorMap"><apiName>IMediatorMap</apiName><shortdesc>
	 The Robotlegs MediatorMap contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs MediatorMap contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:createMediator"><apiName>createMediator</apiName><shortdesc>
		 Create an instance of a mapped IMediator
		 
		 This will instantiate and register a Mediator for a given View Component.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph>
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>An instance of the view Class previously mapped to an <codeph>IMediator</codeph> Class
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create an instance of a mapped <codeph>IMediator</codeph>
		 
		 <p>This will instantiate and register a Mediator for a given View Component.
		 Mediator dependencies will be automatically resolved.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 Check if the view Class has been mapped or not
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether this view class has been mapped
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if the view Class has been mapped or not
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:hasMediatorForView"><apiName>hasMediatorForView</apiName><shortdesc>
		 Check if an IMediator has been registered for a view instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether an <codeph>IMediator</codeph> has been registered for this view instance
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if an <codeph>IMediator</codeph> has been registered for a view instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:hasMediator"><apiName>hasMediator</apiName><shortdesc>
		 Check if the IMediator has been registered
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether this <codeph>IMediator</codeph> has been registered
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> instance
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if the <codeph>IMediator</codeph> has been registered
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:mapView"><apiName>mapView</apiName><shortdesc>
		 Map an IMediator to a view Class
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 </apiDesc></apiParam><apiParam><apiItemName>mediatorClass</apiItemName><apiType value="Class"/><apiDesc>The <codeph>IMediator</codeph> Class
		 </apiDesc></apiParam><apiParam><apiItemName>injectViewAs</apiItemName><apiType value="any"/><apiData>null</apiData><apiDesc>The explicit view Interface or Class that the mediator depends on OR an Array of such Interfaces/Classes.
		 </apiDesc></apiParam><apiParam><apiItemName>autoCreate</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Automatically construct and register an instance of Class <codeph>mediatorClass</codeph> when an instance of Class <codeph>viewClass</codeph> is detected
		 </apiDesc></apiParam><apiParam><apiItemName>autoRemove</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Automatically remove an instance of Class <codeph>mediatorClass</codeph> when its <codeph>viewClass</codeph> leaves the ancestory of the context view
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map an <codeph>IMediator</codeph> to a view Class
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:registerMediator"><apiName>registerMediator</apiName><shortdesc>
		 Manually register an IMediator instance
		 
		 NOTE: Registering a Mediator will NOT inject its dependencies.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view component for the <codeph>IMediator</codeph>
		 </apiDesc></apiParam><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> to register
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Manually register an <codeph>IMediator</codeph> instance
		 
		 <p>NOTE: Registering a Mediator will NOT inject its dependencies.
		 It is assumed that dependencies are already satisfied.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:removeMediatorByView"><apiName>removeMediatorByView</apiName><shortdesc>
		 Remove a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph> that was removed
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:removeMediator"><apiName>removeMediator</apiName><shortdesc>
		 Remove a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph> that was removed
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>mediator</apiItemName><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier><apiDesc>The <codeph>IMediator</codeph> to remove
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:retrieveMediator"><apiName>retrieveMediator</apiName><shortdesc>
		 Retrieve a registered IMediator instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The <codeph>IMediator</codeph>
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IMediator</apiOperationClassifier></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>The view that the <codeph>IMediator</codeph> was registered with
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Retrieve a registered <codeph>IMediator</codeph> instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:unmapView"><apiName>unmapView</apiName><shortdesc>
		 Unmap a view Class
		  
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewClassOrName</apiItemName><apiType value="any"/><apiDesc>The concrete view Class or Fully Qualified Class Name
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a view Class
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:contextView:get"><apiName>contextView</apiName><shortdesc>
		 The IMediatorMap's DisplayObjectContainer
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
		 The <codeph>IMediatorMap</codeph>'s <codeph>DisplayObjectContainer</codeph>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.core:IMediatorMap:org.robotlegs.starling.core:IMediatorMap:enabled:get"><apiName>enabled</apiName><shortdesc>
		 The IMediatorMap's enabled status
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The <codeph>IMediatorMap</codeph>'s enabled status
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IReflector"><apiName>IReflector</apiName><shortdesc>
	 The Robotlegs Reflector contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Reflector contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IReflector:org.robotlegs.starling.core:IReflector:classExtendsOrImplements"><apiName>classExtendsOrImplements</apiName><shortdesc>
		 Does this class or class name implement this superclass or interface?
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolean
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>classOrClassName</apiItemName><apiType value="Object"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>superclass</apiItemName><apiType value="Class"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Does this class or class name implement this superclass or interface?
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IReflector:org.robotlegs.starling.core:IReflector:getClass"><apiName>getClass</apiName><shortdesc>
		 Get the class of this instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Class
		 </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The instance
		 </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Get the class of this instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IReflector:org.robotlegs.starling.core:IReflector:getFQCN"><apiName>getFQCN</apiName><shortdesc>
		 Get the Fully Qualified Class Name of this instance, class name, or class
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The Fully Qualified Class Name
		 </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="any"/><apiDesc>The instance, class name, or class
		 </apiDesc></apiParam><apiParam><apiItemName>replaceColons</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>	 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Get the Fully Qualified Class Name of this instance, class name, or class
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IMediator"><apiName>IMediator</apiName><shortdesc>
	 The Robotlegs Mediator contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Mediator contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:getViewComponent"><apiName>getViewComponent</apiName><shortdesc>
		 The IMediator's view component
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The view component
		 </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
		 The <codeph>IMediator</codeph>'s view component
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:onRegister"><apiName>onRegister</apiName><shortdesc>
		 Should be invoked by the IMediator itself when it is ready to be interacted with
		 
		 Override and place your initialization code here
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Should be invoked by the <codeph>IMediator</codeph> itself when it is ready to be interacted with
		 
		 <p>Override and place your initialization code here</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:onRemove"><apiName>onRemove</apiName><shortdesc>
		 Should be invoked by the IMediator itself when it is ready to for cleanup
		 
		 Override and place your cleanup code here
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Should be invoked by the <codeph>IMediator</codeph> itself when it is ready to for cleanup
		 
		 <p>Override and place your cleanup code here</p>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:preRegister"><apiName>preRegister</apiName><shortdesc>
		 Should be invoked by the IMediatorMap during IMediator registration
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Should be invoked by the <codeph>IMediatorMap</codeph> during <codeph>IMediator</codeph> registration
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:preRemove"><apiName>preRemove</apiName><shortdesc>
		 Invoked when the IMediator has been removed by the IMediatorMap
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Invoked when the <codeph>IMediator</codeph> has been removed by the <codeph>IMediatorMap</codeph>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IMediator:org.robotlegs.starling.core:IMediator:setViewComponent"><apiName>setViewComponent</apiName><shortdesc>
		 The IMediator's view component
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>viewComponent</apiItemName><apiType value="Object"/><apiDesc>view component
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 The <codeph>IMediator</codeph>'s view component
		 
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IInjector"><apiName>IInjector</apiName><shortdesc>
	 The Robotlegs Injector contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs Injector contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:createChild"><apiName>createChild</apiName><shortdesc>
		 Create an injector that inherits rules from its parent
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The injector 
		 </apiDesc><apiOperationClassifier>org.robotlegs.starling.core:IInjector</apiOperationClassifier></apiReturn><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
		 Create an injector that inherits rules from its parent
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:getInstance"><apiName>getInstance</apiName><shortdesc>
		 Create or retrieve an instance of the given class
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An instance
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create or retrieve an instance of the given class
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:hasMapping"><apiName>hasMapping</apiName><shortdesc>
		 Does a rule exist to satsify such a request?
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether such a mapping exists
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Does a rule exist to satsify such a request?
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:injectInto"><apiName>injectInto</apiName><shortdesc>
		 Perform an injection into an object, satisfying all it's dependencies
		 
		 The IInjector should throw an Error
		 if it can't satisfy all dependencies of the injectee.
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>The object to inject into - the Injectee
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Perform an injection into an object, satisfying all it's dependencies
		 
		 <p>The <codeph>IInjector</codeph> should throw an <codeph>Error</codeph>
		 if it can't satisfy all dependencies of the injectee.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:instantiate"><apiName>instantiate</apiName><shortdesc>
		 Create an object of the given class, supplying its dependencies as constructor parameters
		 if the used DI solution has support for constructor injection
		 
		 Adapters for DI solutions that don't support constructor injection should just create a new
		 instance and perform setter and/ or method injection on that.
		 
		 NOTE: This method will always create a new instance.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The created instance
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>The class to instantiate
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Create an object of the given class, supplying its dependencies as constructor parameters
		 if the used DI solution has support for constructor injection
		 
		 <p>Adapters for DI solutions that don't support constructor injection should just create a new
		 instance and perform setter and/ or method injection on that.</p>
		 
		 <p>NOTE: This method will always create a new instance. If you need to retrieve an instance
		 consider using <codeph>getInstance</codeph></p>
		 
		 <p>The <codeph>IInjector</codeph> should throw an <codeph>Error</codeph>
		 if it can't satisfy all dependencies of the injectee.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapClass"><apiName>mapClass</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject a new instance of instantiateClass.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>instantiateClass</apiItemName><apiType value="Class"/><apiDesc>A class to instantiate
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject a new instance of <codeph>instantiateClass</codeph>.
		 
		 <p>This will create a new instance for each injection.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapRule"><apiName>mapRule</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 use rule useRule to determine the correct injection.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>useRule</apiItemName><apiType value="any"/><apiDesc>The rule to use for the injection
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 use rule <codeph>useRule</codeph> to determine the correct injection.
		 
		 <p>This will use whatever injection is set by the given injection rule as created using 
		 one of the other mapping methods.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapSingletonOf"><apiName>mapSingletonOf</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject an instance of useSingletonOf.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>useSingletonOf</apiItemName><apiType value="Class"/><apiDesc>A class to instantiate
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject an instance of <codeph>useSingletonOf</codeph>.
		 
		 <p>This will create an instance on the first injection, but
		 will re-use that instance for subsequent injections.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapSingleton"><apiName>mapSingleton</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject an instance of whenAskedFor.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject an instance of <codeph>whenAskedFor</codeph>.
		 
		 <p>This will create an instance on the first injection, but
		 will re-use that instance for subsequent injections.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:mapValue"><apiName>mapValue</apiName><shortdesc>
		 When asked for an instance of the class whenAskedFor
		 inject the instance useValue.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A reference to the rule for this injection. To be used with <codeph>mapRule</codeph>
		 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>whenAskedFor</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>useValue</apiItemName><apiType value="Object"/><apiDesc>An instance
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 When asked for an instance of the class <codeph>whenAskedFor</codeph>
		 inject the instance <codeph>useValue</codeph>.
		 
		 <p>This is used to register an existing instance with the injector
		 and treat it like a Singleton.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:unmap"><apiName>unmap</apiName><shortdesc>
		 Remove a rule from the injector
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>clazz</apiItemName><apiType value="Class"/><apiDesc>A class or interface
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name (id)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Remove a rule from the injector
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.core:IInjector:org.robotlegs.starling.core:IInjector:applicationDomain:get"><apiName>applicationDomain</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:ApplicationDomain"/></apiValueDef><apiDesc>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:IViewMap"><apiName>IViewMap</apiName><shortdesc>
	 The Robotlegs ViewMap contract.</shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs ViewMap contract. All IViewMap automatic injections occur AFTER the view components are added to the stage.
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:hasPackage"><apiName>hasPackage</apiName><shortdesc>
		 Check if a package has been registered for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether a package has been registered for automatic injection
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if a package has been registered for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:hasType"><apiName>hasType</apiName><shortdesc>
		 Check if a class or interface has been registered for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether an interface has been registered for automatic injection
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view interface 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if a class or interface has been registered for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:mapPackage"><apiName>mapPackage</apiName><shortdesc>
		 Map an entire package (including sub-packages) for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map an entire package (including sub-packages) for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:mapType"><apiName>mapType</apiName><shortdesc>
		 Map a view component class or interface for automatic injection
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view Interface
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map a view component class or interface for automatic injection
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:unmapPackage"><apiName>unmapPackage</apiName><shortdesc>
		 Unmap a package
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>packageName</apiItemName><apiType value="String"/><apiDesc>The substring to compare
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a package
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:unmapType"><apiName>unmapType</apiName><shortdesc>
		 Unmap a view component class or interface
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="Class"/><apiDesc>The concrete view Interface
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a view component class or interface
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:contextView:get"><apiName>contextView</apiName><shortdesc>
		 The IViewMap's DisplayObjectContainer
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="starling.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
		 The <codeph>IViewMap</codeph>'s <codeph>DisplayObjectContainer</codeph>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="org.robotlegs.starling.core:IViewMap:org.robotlegs.starling.core:IViewMap:enabled:get"><apiName>enabled</apiName><shortdesc>
		 The IViewMap's enabled status
		 
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 The <codeph>IViewMap</codeph>'s enabled status
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="org.robotlegs.starling.core:ICommandMap"><apiName>ICommandMap</apiName><shortdesc>
	 The Robotlegs CommandMap contract
	 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 The Robotlegs CommandMap contract
	 </apiDesc></apiClassifierDetail><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:detain"><apiName>detain</apiName><shortdesc>
		 Detain a Command instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiType value="Object"/><apiDesc>The Command instance to detain
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Detain a Command instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:execute"><apiName>execute</apiName><shortdesc>
		 Execute a Command with an optional payload
		 
		 The commandClass must implement an execute() method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc></apiDesc><apiItemName>org.robotlegs.starling.base::ContextError
		</apiItemName><apiOperationClassifier>org.robotlegs.starling.base::ContextError
		</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to instantiate - must have an execute() method
		 </apiDesc></apiParam><apiParam><apiItemName>payload</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>An optional payload
		 </apiDesc></apiParam><apiParam><apiItemName>payloadClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc> An optional class to inject the payload as
		 </apiDesc></apiParam><apiParam><apiItemName>named</apiItemName><apiType value="String"/><apiData/><apiDesc>An optional name for the payload injection
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Execute a Command with an optional payload
		 
		 <p>The <codeph>commandClass</codeph> must implement an execute() method</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:hasEventCommand"><apiName>hasEventCommand</apiName><shortdesc>
		 Check if a Class has been mapped to an Event type
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Whether the Class is mapped to this Event type
		 </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Check if a Class has been mapped to an Event type
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:mapEvent"><apiName>mapEvent</apiName><shortdesc>
		 Map a Class to an Event type
		 
		 The commandClass must implement an execute() method
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc></apiDesc><apiItemName>org.robotlegs.starling.base::ContextError
		</apiItemName><apiOperationClassifier>org.robotlegs.starling.base::ContextError
		</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type to listen for
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to instantiate - must have an execute() method
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>. Your commandClass can optionally [Inject] a variable of this type to access the event that triggered the command.
		 </apiDesc></apiParam><apiParam><apiItemName>oneshot</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Unmap the Class after execution?
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Map a Class to an Event type
		 
		 <p>The <codeph>commandClass</codeph> must implement an execute() method</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:release"><apiName>release</apiName><shortdesc>
		 Release a Command instance
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiType value="Object"/><apiDesc>The Command instance to release for garbage collection
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Release a Command instance
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:unmapEvent"><apiName>unmapEvent</apiName><shortdesc>
		 Unmap a Class to Event type mapping
		 
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>The Event type
		 </apiDesc></apiParam><apiParam><apiItemName>commandClass</apiItemName><apiType value="Class"/><apiDesc>The Class to unmap
		 </apiDesc></apiParam><apiParam><apiItemName>eventClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Optional Event class for a stronger mapping. Defaults to <codeph>flash.events.Event</codeph>.
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Unmap a Class to Event type mapping
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="org.robotlegs.starling.core:ICommandMap:org.robotlegs.starling.core:ICommandMap:unmapEvents"><apiName>unmapEvents</apiName><shortdesc>
		 Removes all mappings made through mapEvent
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Removes all mappings made through <codeph>mapEvent</codeph>
		 </apiDesc></apiOperationDetail></apiOperation></apiClassifier></apiPackage>